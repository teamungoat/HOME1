{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17Fu3wehZSJ8Ux7T9Gp-3j5Lkj6yGFdmC","timestamp":1723432100911},{"file_id":"1IkXosryFCCI_Qq0NZ2WMoA-cRd0lTUl1","timestamp":1723243800650},{"file_id":"1H-8w3hUyWyrHpwlAkVNe6TrOmcgqBI7P","timestamp":1723073915996},{"file_id":"1SEh_IOEBbRTL2ZMs-hAuzuX74gI8ZWBu","timestamp":1722475495764}],"mount_file_id":"1IkXosryFCCI_Qq0NZ2WMoA-cRd0lTUl1","authorship_tag":"ABX9TyMwFH33xVp5jr0WG8uabdJP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4WNPUHD5GbWJ","executionInfo":{"status":"ok","timestamp":1723422596585,"user_tz":-540,"elapsed":19232,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"3da2bde1-4ff6-4680-b45c-7b4ce76d60c4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting konlpy\n","  Downloading konlpy-0.6.0-py2.py3-none-any.whl.metadata (1.9 kB)\n","Collecting JPype1>=0.7.0 (from konlpy)\n","  Downloading JPype1-1.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.26.4)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.1)\n","Downloading konlpy-0.6.0-py2.py3-none-any.whl (19.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.4/19.4 MB\u001b[0m \u001b[31m69.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading JPype1-1.5.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (488 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m488.6/488.6 kB\u001b[0m \u001b[31m27.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: JPype1, konlpy\n","Successfully installed JPype1-1.5.0 konlpy-0.6.0\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (3.1.5)\n","Requirement already satisfied: xlrd in /usr/local/lib/python3.10/dist-packages (2.0.1)\n","Requirement already satisfied: konlpy in /usr/local/lib/python3.10/dist-packages (0.6.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n","Requirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl) (1.1.0)\n","Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.5.0)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n","Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 45 not upgraded.\n","Need to get 10.3 MB of archives.\n","After this operation, 34.1 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 fonts-nanum all 20200506-1 [10.3 MB]\n","Fetched 10.3 MB in 0s (23.1 MB/s)\n","debconf: unable to initialize frontend: Dialog\n","debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 78, <> line 1.)\n","debconf: falling back to frontend: Readline\n","debconf: unable to initialize frontend: Readline\n","debconf: (This frontend requires a controlling tty.)\n","debconf: falling back to frontend: Teletype\n","dpkg-preconfigure: unable to re-open stdin: \n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 123594 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20200506-1_all.deb ...\n","Unpacking fonts-nanum (20200506-1) ...\n","Setting up fonts-nanum (20200506-1) ...\n","Processing triggers for fontconfig (2.13.1-4.2ubuntu5) ...\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/usr/share/fonts/truetype: skipping, looped directory detected\n","/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n","/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n","/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}],"source":["!pip install konlpy\n","!pip install pandas openpyxl xlrd konlpy scikit-learn\n","\n","!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from konlpy.tag import Komoran\n","import re\n","\n","komoran = Komoran()\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import linear_kernel\n","from konlpy.tag import Okt\n","okt = Okt()"],"metadata":{"id":"MVXG_YP5HBt0","executionInfo":{"status":"ok","timestamp":1723422612404,"user_tz":-540,"elapsed":15828,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["def tokenize_and_lemmatize(text):\n","    if isinstance(text, str):\n","        # 사전 전처리: 콜론과 쉼표를 제거하거나, 대체 문자열로 변경\n","        text = text.replace(':', ' ').replace(',', ' ')\n","\n","        # 토큰화 및 어간 추출\n","        tokens = okt.morphs(text, stem=True)\n","\n","        return ' '.join(tokens)\n","    else:\n","        return ''"],"metadata":{"id":"Dl56AE7ehROs","executionInfo":{"status":"ok","timestamp":1723431631696,"user_tz":-540,"elapsed":336,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["pikle_data=pd.read_excel('/content/moviesdata0808.xls', header=None)\n","column_names=['영화명', '평점', '연도', '상영시간', '연령', '감독', '출연', '줄거리', '장르']\n","pikle_data.columns = column_names\n","pikle_data.drop(index=0, inplace=True)\n","df=pd.DataFrame(pikle_data, columns=['영화명', '평점', '연도', '상영시간', '연령', '감독', '출연', '줄거리', '장르'])\n","data=df\n","data.reset_index(drop=True, inplace=True)\n","data.to_csv('movie_data')\n","data['Text'] = (data['장르'] + ' ' + data['연령']  + ' ' + data['감독'] + ' ' + data['출연']+ ' ' + data['줄거리'])\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import linear_kernel\n","from konlpy.tag import Okt\n","\n","\n","# 텍스트 데이터에 함수 적용\n","data['Processed_Text'] = data['Text'].apply(tokenize_and_lemmatize)\n","data['synopsis_processed'] = data['줄거리'].apply(tokenize_and_lemmatize)\n","# 처리된 텍스트 데이터 벡터화\n","tfidf = TfidfVectorizer()\n","tfidf_matrix = tfidf.fit_transform(data['Processed_Text'])\n","tfidf_matrix_synopsys = tfidf.fit_transform(data['synopsis_processed'])\n","# 코사인 유사도 행렬 계산\n","cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n","# 주어진 리스트\n","original_list = [\n","    \"SF\", \"액션\", \"서부극\", \"미스터리\", \"전쟁\", \"스릴러\", \"코미디\",\n","    \"애니메이션\", \"범죄\", \"가족\", \"뮤지컬\", \"드라마\", \"기타\", \"다큐멘터리\",\n","    \"어드벤처\", \"사극\", \"공연\", \"공포(호러)\", \"멜로/로맨스\", \"판타지\"\n","]\n","\n","# 기준이 되는 리스트\n","desired_order = [\n","    \"액션/서부극\", \"드라마\", \"SF/무협/판타지/어드벤처\", \"범죄/수사/추리/스릴러\",\n","    \"로맨틱코미디\", \"멜로/로맨스\", \"코미디\", \"애니메이션\", \"사극/시대극\", \"공포\",\n","    \"다큐멘터리\", \"성인/에로\", \"실험/예술영화\", \"기타\"\n","]\n","\n","# 카테고리 매핑\n","category_mapping = {\n","    \"액션\": \"액션/서부극(웨스턴)\",\n","    \"서부극\": \"액션/서부극\",\n","    \"SF\": \"SF/무협/판타지/어드벤처\",\n","    \"판타지\": \"SF/무협/판타지/어드벤처\",\n","    \"무협\": \"SF/무협/판타지/어드벤처\",\n","    \"어드벤처\": \"SF/무협/판타지/어드벤처\",\n","    \"범죄\": \"범죄/수사/추리/스릴러\",\n","    \"수사\": \"범죄/수사/추리/스릴러\",\n","    \"추리\": \"범죄/수사/추리/스릴러\",\n","    \"스릴러\": \"범죄/수사/추리/스릴러\",\n","    \"로맨틱코미디\": \"로맨틱코미디\",\n","    \"멜로/로맨스\": \"멜로/로맨스\",\n","    \"코미디\": \"코미디\",\n","    \"애니메이션\": \"애니메이션\",\n","    \"사극\": \"사극/시대극\",\n","    \"시대극\": \"사극/시대극\",\n","    \"공포(호러)\": \"공포\",\n","    \"다큐멘터리\": \"다큐멘터리\",\n","    \"성인/에로\": \"성인/에로\",\n","    \"실험/예술영화\": \"실험/예술영화\",\n","    \"기타\": \"기타\",\n","    \"드라마\": \"드라마\",\n","    \"미스터리\": \"범죄/수사/추리/스릴러\",\n","    \"전쟁\": \"기타\",\n","    \"가족\": \"기타\",\n","    \"뮤지컬\": \"기타\",\n","    \"공연\": \"기타\"\n","}\n","\n","# 항목 분류 및 정렬\n","classified = []\n","unclassified = []\n","categorys = []\n","for item in original_list:\n","    category = category_mapping.get(item, None)\n","    categorys.append(category)\n","    if category:\n","        classified.append(category)\n","    else:\n","        unclassified.append(item)\n","\n","# 중복 제거하고 정렬\n","classified = list(dict.fromkeys(classified))\n","\n","# 정렬된 리스트 생성\n","sorted_list = [category for category in desired_order if category in classified]\n","sorted_list.extend(unclassified)\n","\n","print(sorted_list)\n","genre_favor=pd.read_excel('/content/연령별 장르 선호도.xlsx')\n","genre_favor.drop(index=0, inplace=True)\n","genre_favor.columns\n","genre_favor.drop(columns=[' '], inplace=True)\n","genre_favor.columns\n","\n","genre_favor['로맨틱코미디/멜로/로맨스']=genre_favor['로맨틱코미디']+genre_favor['멜로/로맨스']\n","genre_favor['기타']=genre_favor['기타']+genre_favor['실험/예술영화']+genre_favor['성인/에로']\n","genre_favor.drop(columns=['로맨틱코미디', '멜로/로맨스', '실험/예술영화', '성인/에로'], inplace=True)\n","genre_favor.drop(columns='사례수',inplace=True)\n","new_order=['Unnamed: 1', '액션', 'SF/판타지/무협', '드라마', '범죄/수사/추리/스릴러', '로맨틱코미디/멜로/로맨스', '사극/시대극', '코미디',\n","       '애니메이션', '다큐멘터리', '공포', '기타', '합계']\n","genre_favor=genre_favor[new_order]\n","new_columns=['연령대','액션/서부극(웨스턴)','SF/무협/판타지/어드벤처', '드라마', '범죄/수사/추리/스릴러', '로맨틱코미디/멜로/로맨스','사극/시대극', '코미디', '애니메이션',\n","             '다큐멘터리', '공포', '기타','합계']\n","genre_favor.columns=new_columns\n","genre_favor.loc[1,'연령대']= '0~18세 남성'\n","genre_favor.loc[7,'연령대']= '50~90세 남성'\n","genre_favor.loc[8,'연령대']= '0~18세 여성'\n","genre_favor.loc[14,'연령대']= '50~90세 여성'\n","genre_favor_divided=genre_favor.iloc[:,1:13]/100\n","genre_favor_divided.insert(0,'연령대',genre_favor['연령대'])\n","genre_weights_df=genre_favor_divided\n","genre_weights_df"],"metadata":{"id":"1povUSjvlMWQ","executionInfo":{"status":"ok","timestamp":1723422851654,"user_tz":-540,"elapsed":239253,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"colab":{"base_uri":"https://localhost:8080/","height":805},"outputId":"79c7660f-e668-478d-909c-03105a806f67"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["['액션/서부극', '드라마', 'SF/무협/판타지/어드벤처', '범죄/수사/추리/스릴러', '멜로/로맨스', '코미디', '애니메이션', '사극/시대극', '공포', '다큐멘터리', '기타']\n"]},{"output_type":"execute_result","data":{"text/plain":["           연령대 액션/서부극(웨스턴) SF/무협/판타지/어드벤처       드라마 범죄/수사/추리/스릴러  \\\n","1     0~18세 남성    0.393939       0.287879  0.060606     0.075758   \n","2    19~23세 남성    0.370079       0.228346  0.102362     0.102362   \n","3    24~29세 남성     0.33125        0.21875    0.1625       0.0875   \n","4    30~34세 남성    0.373016       0.166667   0.15873     0.039683   \n","5    35~39세 남성    0.471698       0.198113  0.075472     0.018868   \n","6    40~49세 남성    0.421801       0.222749  0.085308     0.033175   \n","7    50~90세 남성    0.361111       0.127778  0.111111     0.061111   \n","8     0~18세 여성      0.0625        0.15625    0.1875     0.171875   \n","9    19~23세 여성       0.175       0.208333     0.125        0.075   \n","10   24~29세 여성     0.23871       0.129032  0.109677     0.135484   \n","11   30~34세 여성    0.191667       0.091667  0.191667     0.108333   \n","12   35~39세 여성    0.096154       0.105769  0.259615     0.067308   \n","13   40~49세 여성    0.221154       0.144231  0.254808     0.081731   \n","14   50~90세 여성    0.148571       0.091429  0.245714     0.045714   \n","\n","   로맨틱코미디/멜로/로맨스    사극/시대극       코미디     애니메이션     다큐멘터리        공포        기타  \\\n","1       0.045455  0.015152  0.060606  0.015152       0.0  0.015152  0.030303   \n","2       0.110236  0.007874  0.031496  0.007874       0.0  0.031496  0.007874   \n","3         0.1125     0.025   0.04375   0.00625       0.0       0.0    0.0125   \n","4       0.111111  0.071429  0.047619  0.007937  0.007937  0.007937  0.007937   \n","5       0.103774  0.028302  0.028302  0.028302  0.018868       0.0  0.028302   \n","6       0.099526  0.052133  0.037915  0.023697       0.0  0.004739  0.018957   \n","7       0.094444  0.133333  0.022222  0.005556  0.061111       0.0  0.022222   \n","8       0.265625  0.046875  0.015625    0.0625       0.0  0.015625  0.015625   \n","9       0.316667  0.008333  0.041667  0.008333       0.0     0.025  0.016667   \n","10      0.296774  0.032258  0.019355  0.012903       0.0  0.019355  0.006452   \n","11          0.25  0.033333  0.008333       0.1       0.0  0.016667  0.008333   \n","12      0.201923  0.028846  0.038462  0.163462  0.009615  0.028846       0.0   \n","13      0.163462  0.048077  0.028846  0.043269  0.004808  0.009615       0.0   \n","14          0.28  0.068571  0.017143  0.005714  0.051429  0.017143  0.028571   \n","\n","     합계  \n","1   1.0  \n","2   1.0  \n","3   1.0  \n","4   1.0  \n","5   1.0  \n","6   1.0  \n","7   1.0  \n","8   1.0  \n","9   1.0  \n","10  1.0  \n","11  1.0  \n","12  1.0  \n","13  1.0  \n","14  1.0  "],"text/html":["\n","  <div id=\"df-62000158-acf8-46fa-8d63-11d62af7101b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>연령대</th>\n","      <th>액션/서부극(웨스턴)</th>\n","      <th>SF/무협/판타지/어드벤처</th>\n","      <th>드라마</th>\n","      <th>범죄/수사/추리/스릴러</th>\n","      <th>로맨틱코미디/멜로/로맨스</th>\n","      <th>사극/시대극</th>\n","      <th>코미디</th>\n","      <th>애니메이션</th>\n","      <th>다큐멘터리</th>\n","      <th>공포</th>\n","      <th>기타</th>\n","      <th>합계</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0~18세 남성</td>\n","      <td>0.393939</td>\n","      <td>0.287879</td>\n","      <td>0.060606</td>\n","      <td>0.075758</td>\n","      <td>0.045455</td>\n","      <td>0.015152</td>\n","      <td>0.060606</td>\n","      <td>0.015152</td>\n","      <td>0.0</td>\n","      <td>0.015152</td>\n","      <td>0.030303</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19~23세 남성</td>\n","      <td>0.370079</td>\n","      <td>0.228346</td>\n","      <td>0.102362</td>\n","      <td>0.102362</td>\n","      <td>0.110236</td>\n","      <td>0.007874</td>\n","      <td>0.031496</td>\n","      <td>0.007874</td>\n","      <td>0.0</td>\n","      <td>0.031496</td>\n","      <td>0.007874</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24~29세 남성</td>\n","      <td>0.33125</td>\n","      <td>0.21875</td>\n","      <td>0.1625</td>\n","      <td>0.0875</td>\n","      <td>0.1125</td>\n","      <td>0.025</td>\n","      <td>0.04375</td>\n","      <td>0.00625</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0125</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>30~34세 남성</td>\n","      <td>0.373016</td>\n","      <td>0.166667</td>\n","      <td>0.15873</td>\n","      <td>0.039683</td>\n","      <td>0.111111</td>\n","      <td>0.071429</td>\n","      <td>0.047619</td>\n","      <td>0.007937</td>\n","      <td>0.007937</td>\n","      <td>0.007937</td>\n","      <td>0.007937</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>35~39세 남성</td>\n","      <td>0.471698</td>\n","      <td>0.198113</td>\n","      <td>0.075472</td>\n","      <td>0.018868</td>\n","      <td>0.103774</td>\n","      <td>0.028302</td>\n","      <td>0.028302</td>\n","      <td>0.028302</td>\n","      <td>0.018868</td>\n","      <td>0.0</td>\n","      <td>0.028302</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>40~49세 남성</td>\n","      <td>0.421801</td>\n","      <td>0.222749</td>\n","      <td>0.085308</td>\n","      <td>0.033175</td>\n","      <td>0.099526</td>\n","      <td>0.052133</td>\n","      <td>0.037915</td>\n","      <td>0.023697</td>\n","      <td>0.0</td>\n","      <td>0.004739</td>\n","      <td>0.018957</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>50~90세 남성</td>\n","      <td>0.361111</td>\n","      <td>0.127778</td>\n","      <td>0.111111</td>\n","      <td>0.061111</td>\n","      <td>0.094444</td>\n","      <td>0.133333</td>\n","      <td>0.022222</td>\n","      <td>0.005556</td>\n","      <td>0.061111</td>\n","      <td>0.0</td>\n","      <td>0.022222</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0~18세 여성</td>\n","      <td>0.0625</td>\n","      <td>0.15625</td>\n","      <td>0.1875</td>\n","      <td>0.171875</td>\n","      <td>0.265625</td>\n","      <td>0.046875</td>\n","      <td>0.015625</td>\n","      <td>0.0625</td>\n","      <td>0.0</td>\n","      <td>0.015625</td>\n","      <td>0.015625</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>19~23세 여성</td>\n","      <td>0.175</td>\n","      <td>0.208333</td>\n","      <td>0.125</td>\n","      <td>0.075</td>\n","      <td>0.316667</td>\n","      <td>0.008333</td>\n","      <td>0.041667</td>\n","      <td>0.008333</td>\n","      <td>0.0</td>\n","      <td>0.025</td>\n","      <td>0.016667</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>24~29세 여성</td>\n","      <td>0.23871</td>\n","      <td>0.129032</td>\n","      <td>0.109677</td>\n","      <td>0.135484</td>\n","      <td>0.296774</td>\n","      <td>0.032258</td>\n","      <td>0.019355</td>\n","      <td>0.012903</td>\n","      <td>0.0</td>\n","      <td>0.019355</td>\n","      <td>0.006452</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>30~34세 여성</td>\n","      <td>0.191667</td>\n","      <td>0.091667</td>\n","      <td>0.191667</td>\n","      <td>0.108333</td>\n","      <td>0.25</td>\n","      <td>0.033333</td>\n","      <td>0.008333</td>\n","      <td>0.1</td>\n","      <td>0.0</td>\n","      <td>0.016667</td>\n","      <td>0.008333</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>35~39세 여성</td>\n","      <td>0.096154</td>\n","      <td>0.105769</td>\n","      <td>0.259615</td>\n","      <td>0.067308</td>\n","      <td>0.201923</td>\n","      <td>0.028846</td>\n","      <td>0.038462</td>\n","      <td>0.163462</td>\n","      <td>0.009615</td>\n","      <td>0.028846</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>40~49세 여성</td>\n","      <td>0.221154</td>\n","      <td>0.144231</td>\n","      <td>0.254808</td>\n","      <td>0.081731</td>\n","      <td>0.163462</td>\n","      <td>0.048077</td>\n","      <td>0.028846</td>\n","      <td>0.043269</td>\n","      <td>0.004808</td>\n","      <td>0.009615</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>50~90세 여성</td>\n","      <td>0.148571</td>\n","      <td>0.091429</td>\n","      <td>0.245714</td>\n","      <td>0.045714</td>\n","      <td>0.28</td>\n","      <td>0.068571</td>\n","      <td>0.017143</td>\n","      <td>0.005714</td>\n","      <td>0.051429</td>\n","      <td>0.017143</td>\n","      <td>0.028571</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-62000158-acf8-46fa-8d63-11d62af7101b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-62000158-acf8-46fa-8d63-11d62af7101b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-62000158-acf8-46fa-8d63-11d62af7101b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b26893da-bab1-41cc-b825-ad760de94853\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b26893da-bab1-41cc-b825-ad760de94853')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b26893da-bab1-41cc-b825-ad760de94853 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d216937e-2544-4342-b90a-0e9ed637ebe9\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('genre_favor_divided')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d216937e-2544-4342-b90a-0e9ed637ebe9 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('genre_favor_divided');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"genre_favor_divided","repr_error":"0"}},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 연령대와 성별에 따른 가중치 데이터프레임 생성\n","genre_weights_data = {\n","    '연령대': [\n","        '0~18세 남성', '19~23세 남성', '24~29세 남성', '30~34세 남성',\n","        '35~39세 남성', '40~49세 남성', '50~90세 남성',\n","        '0~18세 여성', '19~23세 여성', '24~29세 여성', '30~34세 여성',\n","        '35~39세 여성', '40~49세 여성', '50~90세 여성'\n","    ],\n","    '액션/서부극(웨스턴)': [\n","        0.393939, 0.370079, 0.33125, 0.373016, 0.471698, 0.421801, 0.361111,\n","        0.0625, 0.175, 0.23871, 0.191667, 0.096154, 0.221154, 0.148571\n","    ],\n","    'SF/무협/판타지/어드벤처': [\n","        0.287879, 0.228346, 0.21875, 0.166667, 0.198113, 0.222749, 0.127778,\n","        0.15625, 0.208333, 0.129032, 0.091667, 0.105769, 0.144231, 0.091429\n","    ],\n","    '드라마': [\n","        0.060606, 0.102362, 0.1625, 0.15873, 0.075472, 0.085308, 0.111111,\n","        0.1875, 0.125, 0.109677, 0.191667, 0.259615, 0.254808, 0.245714\n","    ],\n","    '범죄/수사/추리/스릴러': [\n","        0.075758, 0.102362, 0.0875, 0.039683, 0.018868, 0.033175, 0.061111,\n","        0.171875, 0.075, 0.135484, 0.108333, 0.067308, 0.081731, 0.045714\n","    ],\n","    '로맨틱코미디/멜로/로맨스': [\n","        0.045455, 0.110236, 0.1125, 0.111111, 0.103774, 0.099526, 0.094444,\n","        0.265625, 0.316667, 0.296774, 0.25, 0.201923, 0.163462, 0.28\n","    ],\n","    '사극/시대극': [\n","        0.015152, 0.007874, 0.025, 0.071429, 0.028302, 0.052133, 0.133333,\n","        0.046875, 0.008333, 0.032258, 0.033333, 0.028846, 0.048077, 0.068571\n","    ],\n","    '코미디': [\n","        0.060606, 0.031496, 0.04375, 0.047619, 0.028302, 0.037915, 0.022222,\n","        0.015625, 0.041667, 0.019355, 0.008333, 0.038462, 0.028846, 0.017143\n","    ],\n","    '애니메이션': [\n","        0.015152, 0.007874, 0.00625, 0.007937, 0.028302, 0.023697, 0.005556,\n","        0.0625, 0.008333, 0.012903, 0.1, 0.163462, 0.043269, 0.005714\n","    ],\n","    '다큐멘터리': [\n","        0.0, 0.0, 0.0, 0.007937, 0.0, 0.0, 0.061111,\n","        0.0, 0.0, 0.0, 0.0, 0.009615, 0.004808, 0.051429\n","    ],\n","    '공포': [\n","        0.015152, 0.031496, 0.0, 0.007937, 0.0, 0.004739, 0.0,\n","        0.015625, 0.025, 0.019355, 0.016667, 0.028846, 0.009615, 0.017143\n","    ],\n","    '기타': [\n","        0.030303, 0.007874, 0.0125, 0.007937, 0.028302, 0.018957, 0.022222,\n","        0.015625, 0.016667, 0.006452, 0.008333, 0.0, 0.0, 0.028571\n","    ],\n","    '합계': [\n","        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0\n","    ]\n","}\n","\n","# 데이터프레임 생성\n","genre_weights_df = pd.DataFrame(genre_weights_data)\n","\n","# 연령대와 성별을 받아 해당하는 가중치 행을 찾는 함수\n","def get_genre_weights(age, gender):\n","    # 성별에 따른 문자열 결정\n","\n","\n","    # 주어진 나이에 따라 연령대 범위를 결정\n","    if age == 10:\n","        age_range = '0~18세'\n","    elif age == 20:\n","        age_range = '19~23세'\n","    elif age == 30:\n","        age_range = '30~34세'\n","    elif age == 40:\n","        age_range = '40~49세'\n","    elif age == 50:\n","        age_range = '50~90세'\n","    elif age >= 60:\n","        age_range = '50~90세'\n","    else:\n","        raise ValueError(\"유효하지 않은 나이 범위입니다.\")\n","\n","    age_gender_key = f\"{age_range} {gender}\"\n","\n","    # 해당 연령대와 성별에 맞는 가중치 행 선택 및 평균 계산\n","    if age_gender_key == '19~23세 남성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '24~29세 남성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    elif age_gender_key == '30~34세 남성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '35~39세 남성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    elif age_gender_key == '19~23세 여성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '24~29세 여성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    elif age_gender_key == '30~34세 여성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '35~39세 여성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    else:\n","        weights = genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].iloc[:, 1:]\n","\n","    return weights\n","\n","genre_weights_df.to_csv('genre_geder_favor_df.csv')"],"metadata":{"id":"ZIA57bhJDVgb","executionInfo":{"status":"ok","timestamp":1723422851655,"user_tz":-540,"elapsed":6,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["movie_name_genre= pd.read_pickle('/content/movie_genre13306.pkl')\n","movie_name_genre=pd.DataFrame(movie_name_genre)"],"metadata":{"id":"ki6lF4T_xL9p","executionInfo":{"status":"ok","timestamp":1723422852119,"user_tz":-540,"elapsed":468,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["\n","# CSV 파일을 Pandas DataFrame으로 불러오기\n","file_path = '/content/movie_data'\n","data = pd.read_csv(file_path)\n","\n","# 'Unnamed: 0' 열 제거\n","data = data.drop(columns=['Unnamed: 0'])\n","\n","# 열 이름을 한국어로 설정\n","data.columns = ['영화명', '평점', '연도', '상영시간', '연령', '감독', '출연진', '줄거리', '장르']\n","\n","pd.set_option('display.max_columns', None)\n","\n","# 한국어 불용어 정의\n","stop_words_ko = {\"및\", \"도\", \"에\", \"의\", \"가\", \"이\", \"은\", \"는\", \"을\", \"를\", \"에서\", \"로\", \"과\", \"와\", \"한\", \"그\", \"이\", \"하\", \"여\", \"속\", \"전\", \"자\", \"이다\"}\n","\n","# 장르 동의어 매핑 생성\n","genre_synonyms_ko = {\n","    '공포': ['공포', '호러', '스릴러', '무서운'],\n","    '로맨스': ['로맨스', '사랑', '연애', '로맨틱'],\n","    '멜로': ['멜로', '멜로드라마'],\n","    '액션': ['액션', '모험', '전투', '스릴'],\n","    '코미디': ['코미디', '웃긴', '유머', '희극'],\n","    '서부': ['서부', '웨스턴', '카우보이', '서부극', 'western'],\n","}"],"metadata":{"id":"pmH5PQgdP-_e","executionInfo":{"status":"ok","timestamp":1723422852119,"user_tz":-540,"elapsed":2,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# 장르 동의어를 정규화하는 함수\n","def normalize_genre_from_synonyms_ko(keyword):\n","    keyword = keyword.strip().lower()\n","    for genre, synonyms in genre_synonyms_ko.items():\n","        if keyword in [synonym.lower() for synonym in synonyms]:\n","            return genre\n","    return keyword\n","\n","# 장르 정규화 함수 (괄호 및 슬래시 처리 포함)\n","def normalize_genre(text):\n","    if pd.isna(text):\n","        return ''\n","    text = re.sub(r'\\s*\\(/?\\s*|\\s*/\\s*|\\s*\\)\\s*', ',', text)\n","    text = re.sub(r'\\s+', ' ', text)\n","    genres = [normalize_genre_from_synonyms_ko(genre.strip()) for genre in text.split(',')]\n","    return ','.join(sorted(set(genres)))\n","\n","\n","def preprocessing(user_input, komoran, remove_stopwords=False, stop_words=[]):\n","    # 한글, 숫자, S/F 문자만 남김\n","    review_text = re.sub(\"[^가-힣ㄱ-ㅎㅏ-ㅣ0-9\\\\sSFsf]\", \"\", user_input)\n","\n","    # 형태소 분석\n","    word_review = komoran.pos(review_text, flatten=False)\n","\n","    # 고유명사(NNP)와 일반명사(NNG)를 분리\n","    filtered_review = []      # 고유명사(NNP)만 담을 리스트\n","    nnp_and_nng_review = []   # 고유명사(NNP)와 일반명사(NNG) 모두 담을 리스트\n","\n","    for sentence in word_review:  # 문장 단위로 분리된 리스트\n","        for word, tag in sentence:\n","            if tag == 'NNP':\n","                filtered_review.append((word, tag))  # 고유명사만 담기\n","                nnp_and_nng_review.append((word, tag))  # 고유명사도 같이 담기\n","            elif tag == 'NNG':\n","                nnp_and_nng_review.append((word, tag))  # 일반명사 담기\n","\n","    if remove_stopwords:\n","        filtered_review = [token for token in filtered_review if not token[0] in stop_words]\n","        nnp_and_nng_review = [token for token in nnp_and_nng_review if not token[0] in stop_words]\n","\n","    return filtered_review, nnp_and_nng_review\n","\n","def find_matching_movie(filtered_review, movie_name_genre):\n","    # filtered_review가 비어 있지 않은 경우에만 수행\n","    if filtered_review:\n","        for word, tag in filtered_review:\n","            for movie_name in movie_name_genre['영화명']:\n","                if re.search(word, movie_name):\n","                    return movie_name_genre[movie_name_genre['영화명'] == movie_name]\n","\n","    return None\n","\n","def find_matching_cast(filtered_review, cast_members):\n","    # filtered_review가 비어 있지 않은 경우에만 수행\n","    if filtered_review:\n","        matching_cast = []\n","        for word, tag in filtered_review:\n","            if word in cast_members:\n","                matching_cast.append(word)\n","\n","        return matching_cast[0] if matching_cast else None\n","\n","    return None\n","\n","def find_matching_director(filtered_review, directors):\n","    # filtered_review가 비어 있지 않은 경우에만 수행\n","    if filtered_review:\n","        matching_director = []\n","        for word, tag in filtered_review:\n","            if word in directors:\n","                matching_director.append(word)\n","\n","        return matching_director[0] if matching_director else None\n","\n","    return None\n","\n","def find_matching_genre(nnp_and_nng_review, genres):\n","    # nnp_and_nng_review가 비어 있지 않은 경우에만 수행\n","    if nnp_and_nng_review:\n","        matching_genres = []\n","        genre_list = genres  # 장르 목록을 리스트로 변환하여 일치 여부를 빠르게 검사\n","\n","        for word, tag in nnp_and_nng_review:\n","            # 명사 사이에 띄어쓰기가 있을 경우, 분리하여 장르를 찾기\n","            words_to_check = word.split()  # 띄어쓰기로 분리된 단어들\n","\n","            for w in words_to_check:\n","                if w in genre_list:\n","                    matching_genres.append(w)\n","\n","        # 중복된 장르를 제거하기 위해 set을 사용한 후 리스트로 변환\n","        matching_genres = list(set(matching_genres))\n","        return ', '.join(matching_genres)\n","\n","    return None\n","\n","# # 예시 문장\n","# user_input = \"키즈모노가타리같은 애니 영화 추천 해줘?\"\n","# recommend_stop_words = set(['은', '는', '이', '가', '하', '아', '것', '들','의', '있', '되', '수', '보', '주', '등', '한', '해주다', '과', '영화', '출연', '등장', '하다'])\n","\n","\n","\n","# # 전처리 및 명사 필터링\n","# filtered_review, nnp_and_nng_review = preprocessing(review, komoran, remove_stopwords=False, stop_words=recommend_stop_words)\n","\n","# # 일치하는 영화명 찾기\n","# matching_movie_info = find_matching_movie(filtered_review, movie_name_genre)\n","\n","# # 일치하는 출연진 찾기\n","# matching_cast = find_matching_cast(filtered_review, cast_members)\n","\n","# # 일치하는 장르 찾기\n","# matching_genres = find_matching_genre(nnp_and_nng_review, genres)\n","\n","# # 일치하는 감독 찾기\n","# matching_director = find_matching_genre(filtered_review, directors)\n","\n","# print(\"고유명사(NNP)만 추출한 결과:\", filtered_review)\n","# print(\"고유명사(NNP)와 일반명사(NNG) 추출한 결과:\", nnp_and_nng_review)\n","# print(\"일치하는 영화 정보:\", matching_movie_info)\n","# print(\"일치하는 출연진:\", matching_cast)\n","# print(\"일치하는 감독:\", matching_director)\n","# print(\"일치하는 장르:\", matching_genres)"],"metadata":{"id":"LZh765PoQOoB","executionInfo":{"status":"ok","timestamp":1723422853092,"user_tz":-540,"elapsed":974,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# 영화 정보 딕셔너리 생성\n","movie_info = {}\n","for i, row in data.iterrows():\n","    movie_id = i\n","    content = row.to_dict()\n","    movie_info[movie_id] = content\n","\n","# 영화 제목과 정보를 매핑하는 새로운 DataFrame 생성\n","movie_titles = data[['영화명']].rename(columns={'영화명': '제목'})\n","movie_titles['info'] = movie_titles.index.map(lambda x: movie_info[x])\n","\n","# DataFrame의 장르 정규화\n","movie_titles['info'] = movie_titles['info'].apply(lambda x: {**x, '장르': normalize_genre(x['장르'])})"],"metadata":{"id":"ihNuySsf2RNT","executionInfo":{"status":"ok","timestamp":1723422853725,"user_tz":-540,"elapsed":635,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# 장르로 영화 추천\n","def recommend_movies_by_genre(genre):\n","    normalized_genre = normalize_genre_from_synonyms_ko(genre)\n","    recommended_movies = movie_titles[movie_titles['info'].apply(lambda x: '장르' in x and normalized_genre in x['장르'])]\n","    return recommended_movies[['제목', 'info']]\n","\n","# 감독 또는 출연 배우로 영화 추천\n","def recommend_movies_by_person(person_name):\n","    person_name = person_name.strip().lower()\n","    recommended_movies = movie_titles[movie_titles['info'].apply(\n","        lambda x: ('감독' in x and person_name in x['감독'].strip().lower())\n","    ) | movie_titles['info'].apply(\n","        lambda x: ('출연진' in x and person_name in x['출연진'].strip().lower())\n","    )]\n","    return recommended_movies[['제목', 'info']]\n","\n","# 장르 목록을 가져오는 함수\n","def get_genres():\n","    genres = set()\n","    for info in movie_titles['info']:\n","        if '장르' in info:\n","            text = info['장르']\n","            genres.update([normalize_genre_from_synonyms_ko(genre.strip()) for genre in text.split(',')])\n","    return sorted(genres)\n","\n","# 영화 제목으로 정보를 가져오는 함수\n","def get_movie_info(title):\n","    filtered_title = title.strip()\n","    matching_titles = movie_titles[movie_titles['제목'].str.contains(filtered_title, na=False)]\n","\n","    if matching_titles.empty:\n","        return f\"영화를 찾지 못했습니다: {title}\"\n","\n","    movie_id = matching_titles.index[0]\n","    return movie_titles[movie_titles.index == movie_id]['info'].iloc[0]"],"metadata":{"id":"M3ZfuJw9Q325","executionInfo":{"status":"ok","timestamp":1723422853726,"user_tz":-540,"elapsed":5,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["# 영화명, 감독, 출연 배우, 장르 및 인물 찾기\n","genres = get_genres()\n","# movies = data['영화명'].dropna().apply(lambda x: x.split(', ')).explode().unique()\n","directors = data['감독'].dropna().apply(lambda x: x.split(', ')).explode().unique()\n","cast_members = data['출연진'].dropna().apply(lambda x: x.split(', ')).explode().unique()\n","print(f\"데이터에 있는 감독들: {directors}\")\n","print(f\"데이터에 있는 출연 배우들: {cast_members}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HDB3PVG2S0Mu","executionInfo":{"status":"ok","timestamp":1723422853726,"user_tz":-540,"elapsed":4,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"7df2c3e3-0b25-4ab7-ca65-8a3dbfbe48f3"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["데이터에 있는 감독들: ['토드 필드' '데이비드 지달리' '피터 버그' ... '핀 테일러' '양익준' '킬리언 리드호퍼']\n","데이터에 있는 출연 배우들: ['케이트 블란쳇' '노에미 메를랑' '니나 호스' ... '파노우' '데닉' '야니스 니에브외너']\n"]}]},{"cell_type":"code","source":["movie_name_genre['text']= movie_name_genre['영화명'] +' '+ movie_name_genre['장르']"],"metadata":{"id":"EhjeU3IfofqG","executionInfo":{"status":"ok","timestamp":1723422854061,"user_tz":-540,"elapsed":338,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["' '.join(tokenize_and_lemmatize(movie_name_genre[movie_name_genre['영화명']=='키즈모노가타리 III : 냉혈편']['text'].values[0]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"UvYADb-kcG1o","executionInfo":{"status":"ok","timestamp":1723430540612,"user_tz":-540,"elapsed":340,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"eafce6c2-cb67-4887-8fe5-34f652f35842"},"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'키 즈 모 노 가 타 리   I I I   :   냉 혈   편   애 니 메 이 션   ,   드 라 마   ,   액 션   ,   판 타 지'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["movie_text = movie_name_genre[movie_name_genre['영화명'] == '키즈모노가타리 III : 냉혈편']['text'].values\n","movie_text"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2pUyeRi4egXd","executionInfo":{"status":"ok","timestamp":1723431663347,"user_tz":-540,"elapsed":304,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"4a2ed63c-b971-4392-f6d9-91ddc5c7387c"},"execution_count":76,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['키즈모노가타리 III : 냉혈편 애니메이션,드라마,액션,판타지'], dtype=object)"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["tfidf.transform([tokenize_and_lemmatize(movie_text[0])])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8CPt-Dk0gY2f","executionInfo":{"status":"ok","timestamp":1723431859331,"user_tz":-540,"elapsed":295,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"530992e2-496d-4f1c-e693-758fe0c66d76"},"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<1x28628 sparse matrix of type '<class 'numpy.float64'>'\n","\twith 5 stored elements in Compressed Sparse Row format>"]},"metadata":{},"execution_count":81}]},{"cell_type":"code","source":["def get_recommendations(movie_title=None,keywords=None, genre=None, director=None, actor = None, gender=None, age=None, favored_genres=None, cosine_sim=cosine_sim):\n","\n","    filtered_data = data.copy()\n","\n","    # 기본 가중치 설정\n","    weights = {'genre_weight': 0.0, 'director_weight': 0.0}\n","    entered_criteria = 0\n","\n","    # 입력된 조건에 대해 가중치 증가\n","    if genre:\n","        weights['genre_weight'] = 0.2\n","        entered_criteria += 1\n","    if director:\n","        weights['director_weight'] = 0.2\n","        entered_criteria += 1\n","    if actor:\n","        weights['actor_weight'] = 0.2\n","        entered_criteria += 1\n","    if entered_criteria > 0:\n","        equal_weight = 1.0 / entered_criteria\n","        for key in weights.keys():\n","            if weights[key] == 0.0:\n","                weights[key] = equal_weight\n","\n","    #가입 할 때 기입하는 선호 장르 가중치\n","    if favored_genres:\n","        weights['favored_genre_weight'] = 0.1\n","\n","    # 연령과 성별에 따른 장르 가중치 계산\n","    if gender and age:\n","        genre_weights = get_genre_weights(age, gender)  # 여성일 때 드라마 장르 가중치\n","        print(genre_weights)\n","\n","\n","    if movie_title:\n","        if movie_title not in data['영화명'].values:\n","            # 코사인 유사도 계산 없이 가장 유사한 영화명 추천\n","            # print(movie_title)\n","            movie_text = movie_name_genre[movie_name_genre['영화명'] == movie_title]['text'].values\n","            if len(movie_text) > 0:\n","                # 해당 텍스트를 토큰화 및 전처리 후 벡터화\n","                processed_text = tokenize_and_lemmatize(movie_text[0])\n","                tfidf_title_genre = tfidf.transform([processed_text])\n","\n","                # 코사인 유사도 계산\n","                cosine_sim_title = linear_kernel(tfidf_title_genre, tfidf_matrix)\n","                sim_scores = list(enumerate(cosine_sim_title[0]))\n","                print(sim_scores)\n","            # 입력조건, 연령과 성별에 따른 장르 가중치 적용\n","            for i, (idx, score) in enumerate(sim_scores):\n","                #입력 조건 가중치 적용\n","                #장르 가중치\n","                genre_score = 0\n","                if genre:\n","                    serched_m_genres = [g.strip().lower() for g in data.loc[idx, '장르'].split(',')]\n","                    if genre.strip().lower() in serched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                #감독, 배우 가중치\n","                director_score = weights['director_weight'] if director and director in data.loc[idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[idx, '출연진'] else 0\n","\n","                #해당 영화의 장르 확인\n","                genre_list = data.loc[idx, '장르'].split(',')\n","\n","                # 초기화\n","                genre_weight_score = 0\n","                # 장르 가중치 리스트 초기화\n","                genre_weights_list = []\n","\n","                # 장르 가중치 계산\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)  # 각 장르 가중치를 리스트에 추가\n","                                break\n","\n","                    # 가장 큰 두 개의 가중치를 선택하여 합산\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score = genre_weight_score/2  # 두 개의 가중치를 반영한 점수 계산\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)  # 장르가 두 개 미만일 경우 모든 가중치를 합산\n","\n","                # 선호 장르 가중치 적용\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                # 기존 점수와 새로운 가중치를 반영한 점수 계산\n","                total_score = score + genre_score + director_score + actor_score +  genre_weight_score + favored_genre_weight_score\n","                # 디버깅 또는 로그 출력을 위해 idx와 관련 정보를 출력\n","                # print(f'Idx: {idx}, Movie Title: {data.loc[idx, \"영화명\"]}, '\n","                #     f'Similarity: {score}, Genre Score: {genre_score}, '\n","                #     f'Director Score: {director_score},'\n","                #     f'Genre Weight Score: {genre_weight_score},'\n","                #     f'favored_genre_weight_score: {favored_genre_weight_score},'\n","                #     f'Total Score: {total_score}' )\n","\n","                # 최종 점수와 함께 저장\n","                sim_scores[i] = (idx, total_score)\n","            print(movie_title,genre,director,actor)\n","            # 유사도 순으로 정렬\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","            print(sim_scores)\n","            sim_scores = sim_scores[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            recommendations = data.iloc[movie_indices]\n","\n","            # 시각화를 위한 유사도 점수 포함\n","            similarity_scores = [i[1] for i in sim_scores]\n","            return recommendations[['영화명','장르']].values.tolist(), similarity_scores\n","        else: #영화 제목이 데이터에 있는 경우\n","            # 영화명에 해당하는 인덱스 가져오기\n","            idx = data[data['영화명'] == movie_title].index[0]\n","\n","            # 필터링된 데이터 내에서 영화명과 유사한 영화들을 추천하기 위해 코사인 유사도 계산\n","            filtered_indices = filtered_data.index\n","\n","            sim_scores = []\n","            for filtered_idx in filtered_indices:\n","                if filtered_idx == idx:\n","                    continue  # 자기 자신은 제외\n","                sim_score = cosine_sim[idx, filtered_idx]\n","\n","\n","                # 가중치 적용\n","                #장르 가중치\n","                genre_score = 0\n","                if genre:\n","                    serched_m_genres = [g.strip().lower() for g in data.loc[filtered_idx, '장르'].split(',')]\n","                    if genre.strip().lower() in serched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                #감독, 배우 가중치\n","                director_score = weights['director_weight'] if director and director in data.loc[filtered_idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[filtered_idx, '출연진'] else 0\n","\n","\n","                #해당 영화의 장르 확인\n","                genre_list = data.loc[filtered_idx, '장르'].split(',')\n","\n","\n","                # 초기화\n","                genre_weight_score = 0\n","                # 장르 가중치 리스트 초기화\n","                genre_weights_list = []\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)  # 각 장르 가중치를 리스트에 추가\n","                                break\n","\n","                    # 가장 큰 두 개의 가중치를 선택하여 합산\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score = genre_weight_score/2  # 두 개의 가중치를 반영한 점수 계산\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)  # 장르가 두 개 미만일 경우 모든 가중치를 합산\n","\n","                # 선호 장르 가중치 적용\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                # 기존 점수와 새로운 가중치를 반영한 점수 계산\n","                total_score = sim_score + genre_score + director_score + actor_score + genre_weight_score + favored_genre_weight_score\n","                # 디버깅 또는 로그 출력을 위해 idx와 관련 정보를 출력\n","                sim_scores.append((filtered_idx, total_score))\n","                # print(f'Idx: {filtered_idx}, Movie Title: {data.loc[filtered_idx, \"영화명\"]}, '\n","                #     f'Similarity: {sim_score}, Genre Score: {genre_score}, '\n","                #     f'Director Score: {director_score},'\n","                #     f'Actor Score: {actor_score},'\n","                #     f'Genre Weight Score: {genre_weight_score},'\n","                #     f'favored_genre_weight_score: {favored_genre_weight_score},'\n","                #     f'Total Score: {total_score}' )\n","            # 유사도 순으로 정렬\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","            print(sim_scores)\n","            # 상위 5개 추천\n","            sim_scores = sim_scores[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            recommendations = data.iloc[movie_indices]\n","\n","            # 시각화를 위한 유사도 점수 포함\n","            similarity_scores = [i[1] for i in sim_scores]\n","            return recommendations[['영화명','장르']].values.tolist(), similarity_scores\n","\n","    else:\n","            # movie_title이 없는 경우 나머지 조건들을 사용하여 추천\n","        sim_scores = []\n","        print(\"nnp_and_nng_review 내용:\", nnp_and_nng_review)\n","        exclude_words = ['영화', '추천','내용','줄거리']\n","        words_only = [word for word, tag in nnp_and_nng_review if word not in exclude_words]\n","        words_text = ' '.join(words_only)\n","        print(\"words_text 내용:\", words_text)\n","        if any(word == '내용' or word == '줄거리' for word, tag in nnp_and_nng_review):\n","            # user_input을 벡터화한 것과 영화를 비교하는 로직\n","            user_tfidf_vector = tfidf.transform([tokenize_and_lemmatize(words_text)])\n","            cosine_sim_user = linear_kernel(user_tfidf_vector, tfidf_matrix_synopsys)\n","\n","            for idx in filtered_data.index:\n","                sim_score = cosine_sim_user[0, idx]\n","\n","                # 최종 점수 계산 및 저장\n","                total_score = sim_score  # 여기에 필요한 가중치를 추가하여 계산할 수 있습니다.\n","                sim_scores.append((idx, total_score))\n","\n","            # 유사도 점수로 정렬 후 상위 5개를 선택\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            similarity_scores = [i[1] for i in sim_scores]\n","\n","            # 영화 제목과 장르를 리스트로 반환\n","            recommendations = data.iloc[movie_indices][['영화명', '장르']].values.tolist()\n","            return recommendations, similarity_scores\n","        else:\n","            for idx in filtered_data.index:\n","                genre_score = 0\n","                year_score = 0  # 각 영화마다 year_score을 초기화\n","\n","                # '최신'이란 단어가 있으면 연도에 따라 점수 부여\n","                if any(word == '최신' for word, tag in nnp_and_nng_review):\n","                    if data.loc[idx, '연도'] == 2024:\n","                        year_score = 2\n","\n","                if genre:\n","                    searched_m_genres = [g.strip().lower() for g in data.loc[idx, '장르'].split(',')]\n","                    if genre.strip().lower() in searched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                director_score = weights['director_weight'] if director and director in data.loc[idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[idx, '출연진'] else 0\n","\n","                genre_list = data.loc[idx, '장르'].split(',')\n","                genre_weight_score = 0\n","                genre_weights_list = []\n","\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)\n","                                break\n","\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score /= 2\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)\n","\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                total_score = genre_score + director_score + actor_score + genre_weight_score + favored_genre_weight_score + year_score\n","                sim_scores.append((idx, total_score))\n","                # print(f'Idx: {idx}, Movie Title: {data.loc[idx, \"영화명\"]}, '\n","                #     f'Genre Score: {genre_score}, Director Score: {director_score}, '\n","                #     f'Actor Score: {actor_score}, Genre Weight Score: {genre_weight_score}, '\n","                #     f'Favored Genre Weight Score: {favored_genre_weight_score}, '\n","                #     f'Year Score: {year_score}, '\n","                #     f'Total Score: {total_score}')\n","\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","            print(sim_scores)\n","            # 상위 5개 출력\n","            sim_scores = sim_scores[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            recommendations = data.iloc[movie_indices]\n","            similarity_scores = [i[1] for i in sim_scores]\n","            return recommendations[['영화명', '장르']].values.tolist(), similarity_scores\n","\n"],"metadata":{"id":"l2iIpZONqU3_","executionInfo":{"status":"ok","timestamp":1723431717802,"user_tz":-540,"elapsed":347,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["# 사용자 입력 처리 및 영화 추천\n","user_input = input(\"영화 제목, 원하는 장르, 감독 또는 출연 배우를 입력하세요 (예: 공포, 액션, 멜로, 서부, 로버트 다우니 주니어): \")\n","\n","# 전처리 및 명사 필터링\n","filtered_review, nnp_and_nng_review = preprocessing(user_input, komoran, remove_stopwords=False, stop_words=None)\n","\n","# 일치하는 영화명 찾기\n","matching_movie_info = find_matching_movie(filtered_review, movie_name_genre)\n","\n","# 일치하는 출연진 찾기\n","matching_cast = find_matching_cast(filtered_review, cast_members)\n","\n","# 일치하는 장르 찾기\n","matching_genres = find_matching_genre(nnp_and_nng_review, genres)\n","\n","# 일치하는 감독 찾기\n","matching_director = find_matching_genre(filtered_review, directors)\n","\n","# 결과 출력\n","if matching_movie_info is not None and not matching_movie_info.empty:\n","    movie_found = matching_movie_info['영화명'].tolist()[0]\n","else:\n","    movie_found = None\n","\n","director_found = matching_director if matching_director else None\n","genre_found = matching_genres if matching_genres else None\n","person_found = matching_cast if matching_cast else None\n","\n","print(\"고유명사(NNP)만 추출한 결과:\", filtered_review)\n","print(\"고유명사(NNP)와 일반명사(NNG) 추출한 결과:\", nnp_and_nng_review)\n","print(f\"찾은 영화: {movie_found}\")\n","print(f\"찾은 감독: {director_found}\")\n","print(f\"찾은 장르: {genre_found}\")\n","print(f\"찾은 인물: {person_found}\")\n","# 범죄도시2 같은 액션 영화 추천해줘\n","# 범죄도시2 같은 액션 마동석 나오는 영화 추천 해줘\n","# 키즈모노가타리같은 애니 영화 추천 해줘\n","# 최신 액션 영화 추천 해줘\n","# 전쟁나서 사람들이 피난가는 줄거리의 영화를 추천해줄래?\n","# ['영화명','장르', '평점', '연도', '상영시간', '연령', '감독', '출연', '시놉시스']\n","# 사용자 입력을 통한 영화명, 장르, 감독, 제작 연도, 평점 입력\n","movie_title = movie_found\n","genre = genre_found\n","director = director_found\n","actor = person_found\n","# 성별, 나이, 선호 장르 입력 처리\n","gender_input = input(\"사용자의 성별을 입력하세요 (남성, 여성) (입력하지 않으면 무시됩니다): \").strip()\n","age_input = input(\"사용자의 나이를 입력하세요 (입력하지 않으면 무시됩니다): \").strip()\n","favored_genres_input = input(\"사용자의 선호 장르를 입력하세요 (입력하지 않으면 무시됩니다): \").strip()\n","\n","# 입력 값이 비어 있으면 None 또는 기본값으로 설정\n","gender = gender_input if gender_input else None\n","age = int(age_input) if age_input.isdigit() else None\n","favored_genres = favored_genres_input.split() if favored_genres_input else None\n","recommendations, similarity_scores = get_recommendations(movie_title, genre, director,actor, gender,age, favored_genres)\n","print(recommendations)\n","print(similarity_scores)\n","# 범죄도시2 같은 액션 영화 추천해줘\n","# 범죄도시2 같은 액션 마동석 나오는 영화 추천 해줘\n","# 키즈모노가타리같은 애니 영화 추천 해줘\n","# 최신 액션 영화 추천 해줘\n","# 전쟁나서 사람들이 피난가는 줄거리의 영화를 추천해줄래?\n","# 전쟁나서 사람들이 피난가는 줄거리의 영화를 추천해줄래?"],"metadata":{"id":"4h1kzG3YfIq_","colab":{"base_uri":"https://localhost:8080/","height":592},"outputId":"25cd57e0-a38a-4b67-8dbc-1b98bd468209","executionInfo":{"status":"error","timestamp":1723431727711,"user_tz":-540,"elapsed":8284,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":79,"outputs":[{"name":"stdout","output_type":"stream","text":["영화 제목, 원하는 장르, 감독 또는 출연 배우를 입력하세요 (예: 공포, 액션, 멜로, 서부, 로버트 다우니 주니어): 키즈모노가타리같은 애니 영화 추천 해줘\n","고유명사(NNP)만 추출한 결과: [('모노가타리', 'NNP'), ('애니', 'NNP')]\n","고유명사(NNP)와 일반명사(NNG) 추출한 결과: [('키즈', 'NNG'), ('모노가타리', 'NNP'), ('애니', 'NNP'), ('영화', 'NNG'), ('추천', 'NNG')]\n","찾은 영화: 키즈모노가타리 III : 냉혈편\n","찾은 감독: None\n","찾은 장르: 키즈\n","찾은 인물: None\n","사용자의 성별을 입력하세요 (남성, 여성) (입력하지 않으면 무시됩니다): \n","사용자의 나이를 입력하세요 (입력하지 않으면 무시됩니다): \n","사용자의 선호 장르를 입력하세요 (입력하지 않으면 무시됩니다): \n"]},{"output_type":"error","ename":"ValueError","evalue":"Incompatible dimension for X and Y matrices: X.shape[1] == 28628 while Y.shape[1] == 37107","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-79-ebef76709703>\u001b[0m in \u001b[0;36m<cell line: 55>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0mage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mage_input\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mage_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misdigit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m \u001b[0mfavored_genres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfavored_genres_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mfavored_genres_input\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 55\u001b[0;31m \u001b[0mrecommendations\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msimilarity_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_recommendations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmovie_title\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgenre\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdirector\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mactor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgender\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfavored_genres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     56\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecommendations\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msimilarity_scores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-78-8656cf8e6a6a>\u001b[0m in \u001b[0;36mget_recommendations\u001b[0;34m(movie_title, keywords, genre, director, actor, gender, age, favored_genres, cosine_sim)\u001b[0m\n\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m                 \u001b[0;31m# 코사인 유사도 계산\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m                 \u001b[0mcosine_sim_title\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlinear_kernel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtfidf_title_genre\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtfidf_matrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m                 \u001b[0msim_scores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcosine_sim_title\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msim_scores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    212\u001b[0m                     )\n\u001b[1;32m    213\u001b[0m                 ):\n\u001b[0;32m--> 214\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mlinear_kernel\u001b[0;34m(X, Y, dense_output)\u001b[0m\n\u001b[1;32m   1327\u001b[0m         \u001b[0mThe\u001b[0m \u001b[0mGram\u001b[0m \u001b[0mmatrix\u001b[0m \u001b[0mof\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mlinear\u001b[0m \u001b[0mkernel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mX\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1328\u001b[0m     \"\"\"\n\u001b[0;32m-> 1329\u001b[0;31m     \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_pairwise_arrays\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1330\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0msafe_sparse_dot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdense_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdense_output\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1331\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/sklearn/metrics/pairwise.py\u001b[0m in \u001b[0;36mcheck_pairwise_arrays\u001b[0;34m(X, Y, precomputed, dtype, accept_sparse, force_all_finite, copy)\u001b[0m\n\u001b[1;32m    188\u001b[0m             )\n\u001b[1;32m    189\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m         raise ValueError(\n\u001b[0m\u001b[1;32m    191\u001b[0m             \u001b[0;34m\"Incompatible dimension for X and Y matrices: \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    192\u001b[0m             \u001b[0;34m\"X.shape[1] == %d while Y.shape[1] == %d\"\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Incompatible dimension for X and Y matrices: X.shape[1] == 28628 while Y.shape[1] == 37107"]}]},{"cell_type":"code","source":["# def get_user_input():\n","\n","#     user_input = input(\"영화 제목, 원하는 장르, 감독 또는 출연 배우를 입력하세요 (예: 공포, 액션, 멜로, 서부, 로버트 다우니 주니어): \")\n","#     gender_input = input(\"사용자의 성별을 입력하세요 (남성, 여성) (입력하지 않으면 무시됩니다): \").strip()\n","#     age_input = input(\"사용자의 나이를 입력하세요 (입력하지 않으면 무시됩니다): \").strip()\n","#     favored_genres_input = input(\"사용자의 선호 장르를 입력하세요 (입력하지 않으면 무시됩니다): \").strip()\n","#     return user_input, gender_input, age_input, favored_genres_input\n","\n","# def process_user_input(user_input, komoran, movie_name_genre, cast_members, genres, directors):\n","\n","#     # 전처리 및 명사 필터링\n","#     filtered_review, nnp_and_nng_review = preprocessing(user_input, komoran)\n","\n","#     # 일치하는 영화명 찾기\n","#     matching_movie_info = find_matching_movie(filtered_review, movie_name_genre)\n","\n","#     # 일치하는 출연진 찾기\n","#     matching_cast = find_matching_cast(filtered_review, cast_members)\n","\n","#     # 일치하는 장르 찾기\n","#     matching_genres = find_matching_genre(nnp_and_nng_review, genres)\n","\n","#     # 일치하는 감독 찾기\n","#     matching_director = find_matching_genre(filtered_review, directors)\n","\n","#     # 결과 정리\n","#     movie_found = matching_movie_info['영화명'].tolist()[0] if matching_movie_info is not None and not matching_movie_info.empty else None\n","#     director_found = matching_director if matching_director else None\n","#     genre_found = matching_genres if matching_genres else None\n","#     person_found = matching_cast if matching_cast else None\n","\n","#     return filtered_review, nnp_and_nng_review, movie_found, director_found, genre_found, person_found\n","\n","# def recommend_movies(movie_title, keywords, genre, director, actor, gender, age, favored_genres, cosine_sim):\n","#     \"\"\"\n","#     추천 영화를 찾고 결과를 출력합니다.\n","#     \"\"\"\n","#     recommendations, similarity_scores = get_recommendations(movie_title, keywords, genre, director, actor, gender, age, favored_genres, cosine_sim)\n","#     print(\"추천된 영화 목록:\")\n","#     for recommendation, score in zip(recommendations, similarity_scores):\n","#         print(f\"{recommendation} - 유사도 점수: {score}\")\n","\n","# def main(komoran, movie_name_genre, cast_members, genres, directors, cosine_sim):\n","#     \"\"\"\n","#     전체 프로세스를 실행하는 메인 함수\n","#     \"\"\"\n","#     # 사용자 입력 받기\n","#     user_input, gender_input, age_input, favored_genres_input = get_user_input()\n","\n","#     # 사용자 입력 처리 및 데이터 찾기\n","#     filtered_review, nnp_and_nng_review, movie_found, director_found, genre_found, person_found = process_user_input(\n","#         user_input, komoran, movie_name_genre, cast_members, genres, directors\n","#     )\n","\n","#     print(\"고유명사(NNP)만 추출한 결과:\", filtered_review)\n","#     print(\"고유명사(NNP)와 일반명사(NNG) 추출한 결과:\", nnp_and_nng_review)\n","#     print(f\"찾은 영화: {movie_found}\")\n","#     print(f\"찾은 감독: {director_found}\")\n","#     print(f\"찾은 장르: {genre_found}\")\n","#     print(f\"찾은 인물: {person_found}\")\n","\n","#     # 성별, 나이, 선호 장르 입력 처리\n","#     gender = gender_input if gender_input else None\n","#     age = int(age_input) if age_input.isdigit() else None\n","#     favored_genres = favored_genres_input.split() if favored_genres_input else None\n","\n","#     # 영화 추천 - 추출된 키워드를 기반으로\n","#     recommend_movies(movie_found, nnp_and_nng_review, genre_found, director_found, person_found, gender, age, favored_genres, cosine_sim)\n","\n","# # main 함수를 호출하여 전체 프로세스를 실행합니다.\n","# main(komoran, movie_name_genre, cast_members, genres, directors, cosine_sim)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tpUN8EjYZpwE","executionInfo":{"status":"ok","timestamp":1723428693254,"user_tz":-540,"elapsed":15488,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"6c03bdc0-b5f2-4ce9-ab70-a740a1dcb87d"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["영화 제목, 원하는 장르, 감독 또는 출연 배우를 입력하세요 (예: 공포, 액션, 멜로, 서부, 로버트 다우니 주니어): 최신 액션 영화 추천 해줘\n","사용자의 성별을 입력하세요 (남성, 여성) (입력하지 않으면 무시됩니다): \n","사용자의 나이를 입력하세요 (입력하지 않으면 무시됩니다): \n","사용자의 선호 장르를 입력하세요 (입력하지 않으면 무시됩니다): \n","고유명사(NNP)만 추출한 결과: [('액션 영화', 'NNP')]\n","고유명사(NNP)와 일반명사(NNG) 추출한 결과: [('최신', 'NNG'), ('액션 영화', 'NNP'), ('추천', 'NNG')]\n","찾은 영화: None\n","찾은 감독: None\n","찾은 장르: 액션\n","찾은 인물: None\n","nnp_and_nng_review 내용: [('전쟁', 'NNG'), ('사람', 'NNG'), ('피난', 'NNG'), ('줄거리', 'NNG'), ('영화', 'NNG'), ('추천', 'NNG')]\n","words_text 내용: 전쟁 사람 피난\n","추천된 영화 목록:\n","['지슬', '드라마'] - 유사도 점수: 0.2059237478107119\n","['전쟁과 한 여자', '드라마,에로,전쟁'] - 유사도 점수: 0.18883396054057594\n","['바빌론 A.D.', 'sf,액션,모험,스릴러'] - 유사도 점수: 0.16453187347938\n","['작은 연못 (2010)', '전쟁,드라마'] - 유사도 점수: 0.1557161240130762\n","['존 카터: 바숨 전쟁의 서막', 'sf,판타지,액션,어드벤처'] - 유사도 점수: 0.1466130303371081\n"]}]},{"cell_type":"code","source":["# 범죄도시2 같은 액션 영화 추천해줘\n","# 범죄도시2 같은 액션 마동석 나오는 영화 추천 해줘\n","# 키즈모노가타리같은 애니 영화 추천 해줘\n","# 최신 액션 영화 추천 해줘\n","# 전쟁나서 사람들이 피난가는 줄거리의 영화를 추천해줄래?\n","# 전쟁나서 사람들이 피난가는 줄거리의 영화를 추천해줄래?"],"metadata":{"id":"z0fQiuOpbV5L","executionInfo":{"status":"aborted","timestamp":1723423126867,"user_tz":-540,"elapsed":3,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":null,"outputs":[]}]}