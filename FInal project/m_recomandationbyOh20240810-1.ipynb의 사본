{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1IkXosryFCCI_Qq0NZ2WMoA-cRd0lTUl1","timestamp":1723267824641},{"file_id":"1H-8w3hUyWyrHpwlAkVNe6TrOmcgqBI7P","timestamp":1723073915996},{"file_id":"1SEh_IOEBbRTL2ZMs-hAuzuX74gI8ZWBu","timestamp":1722475495764}],"mount_file_id":"1IkXosryFCCI_Qq0NZ2WMoA-cRd0lTUl1","authorship_tag":"ABX9TyP9BDyYKAC3tO26H2KYbvNI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import matplotlib\n","from matplotlib import font_manager, rc\n","import platform\n","import warnings\n","\n","# 한글 폰트 다운로드 및 설치\n","!apt-get update -qq\n","!apt-get install -qq fonts-nanum\n","\n","# 한글 폰트를 matplotlib에 설정\n","import matplotlib.font_manager as fm\n","\n","font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'\n","font = fm.FontProperties(fname=font_path, size=10)\n","matplotlib.rc('font', family=font.get_name())\n","matplotlib.rcParams['axes.unicode_minus'] = False\n","import matplotlib.pyplot as plt\n","# 경고 무시\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sQE_zw27H7oo","executionInfo":{"status":"ok","timestamp":1723273264502,"user_tz":-540,"elapsed":20127,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"638498a4-aee9-4a35-81aa-40b3ca58bd91"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","!pip install konlpy\n","!pip install pandas openpyxl xlrd konlpy scikit-learn\n","\n","!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf\n","import pandas as pd\n","import numpy as np\n","from konlpy.tag import Komoran\n","import re\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.metrics.pairwise import linear_kernel\n","from konlpy.tag import Okt\n","# 한국어 텍스트 처리를 위한 Okt 초기화\n","okt = Okt()\n","\n","komoran = Komoran()\n","pd.set_option('display.max_columns', None)\n","pikle_data=pd.read_excel('/content/moviesdata0808.xls', header=None)\n","pikle_data\n","column_names=['영화명', '평점', '연도', '상영시간', '연령', '감독', '출연', '줄거리', '장르']\n","pikle_data.columns = column_names\n","pikle_data.drop(index=0, inplace=True)\n","df=pd.DataFrame(pikle_data, columns=['영화명', '평점', '연도', '상영시간', '연령', '감독', '출연', '줄거리', '장르'])\n","data=df\n","data.reset_index(drop=True, inplace=True)\n","data.to_csv('movie_data')\n","data['Text'] = (data['장르'] + ' ' + data['연령']  + ' ' + data['감독'] + ' ' + data['출연']+ ' ' + data['줄거리'])"],"metadata":{"id":"VDQoNPFmt8hU","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723273291479,"user_tz":-540,"elapsed":26981,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"d663eae6-7c50-4707-a3b1-27ed8502f540"},"execution_count":46,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","Requirement already satisfied: konlpy in /usr/local/lib/python3.10/dist-packages (0.6.0)\n","Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.5.0)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.26.4)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.1.4)\n","Requirement already satisfied: openpyxl in /usr/local/lib/python3.10/dist-packages (3.1.5)\n","Requirement already satisfied: xlrd in /usr/local/lib/python3.10/dist-packages (2.0.1)\n","Requirement already satisfied: konlpy in /usr/local/lib/python3.10/dist-packages (0.6.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.3.2)\n","Requirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n","Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.10/dist-packages (from openpyxl) (1.1.0)\n","Requirement already satisfied: JPype1>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (1.5.0)\n","Requirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.10/dist-packages (from konlpy) (4.9.4)\n","Requirement already satisfied: scipy>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from JPype1>=0.7.0->konlpy) (24.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","fonts-nanum is already the newest version (20200506-1).\n","0 upgraded, 0 newly installed, 0 to remove and 45 not upgraded.\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 12 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/usr/share/fonts/truetype: skipping, looped directory detected\n","/usr/share/fonts/truetype/humor-sans: skipping, looped directory detected\n","/usr/share/fonts/truetype/liberation: skipping, looped directory detected\n","/usr/share/fonts/truetype/nanum: skipping, looped directory detected\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}]},{"cell_type":"code","source":["# 텍스트를 토큰화하고 원형으로 복원하는 함수 정의\n","def tokenize_and_lemmatize(text):\n","    if isinstance(text, str):  # Check if 'text' is a string\n","        tokens = okt.morphs(text, stem=True)\n","        return ' '.join(tokens)\n","    else:\n","        return ''  # Return an empty string or handle NaN case appropriately"],"metadata":{"id":"cI1lYw5MtTrq","executionInfo":{"status":"ok","timestamp":1723273291479,"user_tz":-540,"elapsed":2,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["# 텍스트 데이터에 함수 적용\n","data['Processed_Text'] = data['Text'].apply(tokenize_and_lemmatize)\n","# 처리된 텍스트 데이터 벡터화\n","tfidf = TfidfVectorizer()\n","tfidf_matrix = tfidf.fit_transform(data['Processed_Text'])\n","# 코사인 유사도 행렬 계산\n","cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n","genres = df['장르'].str.split(',').explode().str.strip().unique().tolist()\n","genres\n","# 액션/서부극(웨스턴), 드라마, SF/무협/판타지, 범죄/수사/추리/스릴러, 로맨틱코미디, 멜로/로맨스, 코미디, 애니메이션, 사극/시대국, 공포, 다큐멘터리, 성인/에로, 실험/예술영화, 기타"],"metadata":{"id":"ngHavlF8tTrq","executionInfo":{"status":"ok","timestamp":1723273431677,"user_tz":-540,"elapsed":140199,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"db79c69e-e532-49ad-fd97-33448ed438ba"},"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['음악',\n"," '드라마',\n"," '액션',\n"," '스릴러',\n"," '재난',\n"," '전쟁',\n"," 'sf',\n"," '공포',\n"," '코미디',\n"," '서스펜스',\n"," '느와르',\n"," '미스터리',\n"," '범죄',\n"," '피카레스크',\n"," '사회고발',\n"," '판타지',\n"," '로맨스',\n"," '멜로',\n"," '애니메이션',\n"," '모험',\n"," '첩보',\n"," '어드벤처',\n"," '가족',\n"," '하드보일드',\n"," '실화',\n"," '뮤지컬',\n"," '시대극',\n"," '슈퍼히어로',\n"," '스페이스오페라',\n"," '스포츠',\n"," '블랙코미디',\n"," '무협',\n"," '다큐멘터리',\n"," '패러디',\n"," '서부극',\n"," '밀리터리',\n"," '전기',\n"," '일상',\n"," '괴수',\n"," '호러',\n"," '추리',\n"," '오컬트',\n"," '퇴마',\n"," '가톨릭',\n"," '기독교',\n"," '사극',\n"," '공연실황',\n"," '생존',\n"," '고어',\n"," '좀비',\n"," '아포칼립스',\n"," '군상극',\n"," '개그',\n"," '역사',\n"," '치유물',\n"," '디스토피아',\n"," '테러',\n"," '스톱모션',\n"," '휴먼',\n"," '가상역사',\n"," '형사',\n"," '전염병',\n"," '리메이크',\n"," '슬래셔물',\n"," '성장',\n"," '세카이계',\n"," '복수',\n"," '이세계물',\n"," '전생',\n"," '영지',\n"," '마왕',\n"," '사이버펑크',\n"," '게임원작',\n"," '배틀',\n"," '크리처',\n"," '실험',\n"," '정치',\n"," '법정',\n"," '워맨스',\n"," '로드무비',\n"," '퀴어',\n"," '애완동물',\n"," '탐정물',\n"," '버디',\n"," '대체역사',\n"," '수사',\n"," '하이스트',\n"," 'BL',\n"," '스팀펑크',\n"," '안티히어로',\n"," '스플래터',\n"," '크로스오버',\n"," '오피스',\n"," '포스트',\n"," '이세계전생',\n"," '악역영애',\n"," '루프',\n"," '테크노',\n"," '스파이',\n"," '교육',\n"," '학원',\n"," '학원물',\n"," '조난극',\n"," '히어로',\n"," '시간여행',\n"," '공룡',\n"," '환생',\n"," '세카이',\n"," '뱀파이어',\n"," '농구',\n"," '청춘',\n"," '정의구현',\n"," '종교',\n"," '밴드',\n"," '옴니버스',\n"," '하이틴',\n"," '모큐멘터리',\n"," '키즈',\n"," '버디물',\n"," '타임리프',\n"," '실존인물',\n"," '거대로봇',\n"," '일진물',\n"," '로봇',\n"," '게임',\n"," '단편',\n"," '패러노멀',\n"," '블랙 코미디',\n"," '어린이',\n"," '수명',\n"," '퓨전',\n"," '타임루프',\n"," '배틀로얄',\n"," '회귀',\n"," '모터',\n"," '근친',\n"," '다크플레이스',\n"," '블록버스터',\n"," '에로',\n"," '기타',\n"," '안트로펑크',\n"," '심리',\n"," 'K-POP',\n"," '로맨틱',\n"," '페이크다큐멘터리',\n"," '갱스터',\n"," '요리',\n"," '항공',\n"," '장편',\n"," '만주',\n"," '예술',\n"," '독립영화',\n"," '독립',\n"," '학교',\n"," '다크히어로',\n"," '능력자 배틀물',\n"," '음모론',\n"," '연예계',\n"," '아이돌',\n"," '픽션',\n"," '전략',\n"," '희비극',\n"," '감동',\n"," '월드시네마',\n"," '댄스',\n"," '쿵푸',\n"," '경찰',\n"," '진실추적',\n"," '에로티카',\n"," '동아시아',\n"," '장편소설',\n"," '사실주의',\n"," '현실',\n"," '각색',\n"," '해양',\n"," '막장',\n"," '하렘',\n"," '특촬',\n"," '불륜',\n"," '코스튬']"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["# 주어진 리스트\n","original_list = [\n","    \"SF\", \"액션\", \"서부극\", \"미스터리\", \"전쟁\", \"스릴러\", \"코미디\",\n","    \"애니메이션\", \"범죄\", \"가족\", \"뮤지컬\", \"드라마\", \"기타\", \"다큐멘터리\",\n","    \"어드벤처\", \"사극\", \"공연\", \"공포(호러)\", \"멜로/로맨스\", \"판타지\"\n","]\n","\n","# 기준이 되는 리스트\n","desired_order = [\n","    \"액션/서부극\", \"드라마\", \"SF/무협/판타지/어드벤처\", \"범죄/수사/추리/스릴러\",\n","    \"로맨틱코미디\", \"멜로/로맨스\", \"코미디\", \"애니메이션\", \"사극/시대극\", \"공포\",\n","    \"다큐멘터리\", \"성인/에로\", \"실험/예술영화\", \"기타\"\n","]\n","\n","# 카테고리 매핑\n","category_mapping = {\n","    \"액션\": \"액션/서부극(웨스턴)\",\n","    \"서부극\": \"액션/서부극\",\n","    \"SF\": \"SF/무협/판타지/어드벤처\",\n","    \"판타지\": \"SF/무협/판타지/어드벤처\",\n","    \"무협\": \"SF/무협/판타지/어드벤처\",\n","    \"어드벤처\": \"SF/무협/판타지/어드벤처\",\n","    \"범죄\": \"범죄/수사/추리/스릴러\",\n","    \"수사\": \"범죄/수사/추리/스릴러\",\n","    \"추리\": \"범죄/수사/추리/스릴러\",\n","    \"스릴러\": \"범죄/수사/추리/스릴러\",\n","    \"로맨틱코미디\": \"로맨틱코미디\",\n","    \"멜로/로맨스\": \"멜로/로맨스\",\n","    \"코미디\": \"코미디\",\n","    \"애니메이션\": \"애니메이션\",\n","    \"사극\": \"사극/시대극\",\n","    \"시대극\": \"사극/시대극\",\n","    \"공포(호러)\": \"공포\",\n","    \"다큐멘터리\": \"다큐멘터리\",\n","    \"성인/에로\": \"성인/에로\",\n","    \"실험/예술영화\": \"실험/예술영화\",\n","    \"기타\": \"기타\",\n","    \"드라마\": \"드라마\",\n","    \"미스터리\": \"범죄/수사/추리/스릴러\",\n","    \"전쟁\": \"기타\",\n","    \"가족\": \"기타\",\n","    \"뮤지컬\": \"기타\",\n","    \"공연\": \"기타\"\n","}\n","\n","# 항목 분류 및 정렬\n","classified = []\n","unclassified = []\n","categorys = []\n","for item in original_list:\n","    category = category_mapping.get(item, None)\n","    categorys.append(category)\n","    if category:\n","        classified.append(category)\n","    else:\n","        unclassified.append(item)\n","\n","# 중복 제거하고 정렬\n","classified = list(dict.fromkeys(classified))\n","\n","# 정렬된 리스트 생성\n","sorted_list = [category for category in desired_order if category in classified]\n","sorted_list.extend(unclassified)\n","\n","print(sorted_list)\n","genre_favor=pd.read_excel('/content/연령별 장르 선호도.xlsx')\n","genre_favor.drop(index=0, inplace=True)\n","genre_favor.columns\n","genre_favor.drop(columns=[' '], inplace=True)\n","genre_favor['로맨틱코미디/멜로/로맨스']=genre_favor['로맨틱코미디']+genre_favor['멜로/로맨스']\n","genre_favor['기타']=genre_favor['기타']+genre_favor['실험/예술영화']+genre_favor['성인/에로']\n","genre_favor.drop(columns=['로맨틱코미디', '멜로/로맨스', '실험/예술영화', '성인/에로'], inplace=True)\n","genre_favor.drop(columns='사례수',inplace=True)\n","new_order=['Unnamed: 1', '액션', 'SF/판타지/무협', '드라마', '범죄/수사/추리/스릴러', '로맨틱코미디/멜로/로맨스', '사극/시대극', '코미디',\n","       '애니메이션', '다큐멘터리', '공포', '기타', '합계']\n","genre_favor=genre_favor[new_order]\n","new_columns=['연령대','액션/서부극(웨스턴)','SF/무협/판타지/어드벤처', '드라마', '범죄/수사/추리/스릴러', '로맨틱코미디/멜로/로맨스','사극/시대극', '코미디', '애니메이션',\n","             '다큐멘터리', '공포', '기타','합계']\n","genre_favor.columns=new_columns\n","genre_favor.loc[1,'연령대']= '0~18세 남성'\n","genre_favor.loc[7,'연령대']= '50~90세 남성'\n","genre_favor.loc[8,'연령대']= '0~18세 여성'\n","genre_favor.loc[14,'연령대']= '50~90세 여성'\n","genre_favor_divided=genre_favor.iloc[:,1:13]/100\n","genre_favor_divided.insert(0,'연령대',genre_favor['연령대'])\n","genre_weights_df=genre_favor_divided\n","genre_weights_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":805},"id":"DJCyzYtVGi8C","executionInfo":{"status":"ok","timestamp":1723273431678,"user_tz":-540,"elapsed":6,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"outputId":"59e0316d-7f83-403a-cda0-1fb1148015df"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["['액션/서부극', '드라마', 'SF/무협/판타지/어드벤처', '범죄/수사/추리/스릴러', '멜로/로맨스', '코미디', '애니메이션', '사극/시대극', '공포', '다큐멘터리', '기타']\n"]},{"output_type":"execute_result","data":{"text/plain":["           연령대 액션/서부극(웨스턴) SF/무협/판타지/어드벤처       드라마 범죄/수사/추리/스릴러  \\\n","1     0~18세 남성    0.393939       0.287879  0.060606     0.075758   \n","2    19~23세 남성    0.370079       0.228346  0.102362     0.102362   \n","3    24~29세 남성     0.33125        0.21875    0.1625       0.0875   \n","4    30~34세 남성    0.373016       0.166667   0.15873     0.039683   \n","5    35~39세 남성    0.471698       0.198113  0.075472     0.018868   \n","6    40~49세 남성    0.421801       0.222749  0.085308     0.033175   \n","7    50~90세 남성    0.361111       0.127778  0.111111     0.061111   \n","8     0~18세 여성      0.0625        0.15625    0.1875     0.171875   \n","9    19~23세 여성       0.175       0.208333     0.125        0.075   \n","10   24~29세 여성     0.23871       0.129032  0.109677     0.135484   \n","11   30~34세 여성    0.191667       0.091667  0.191667     0.108333   \n","12   35~39세 여성    0.096154       0.105769  0.259615     0.067308   \n","13   40~49세 여성    0.221154       0.144231  0.254808     0.081731   \n","14   50~90세 여성    0.148571       0.091429  0.245714     0.045714   \n","\n","   로맨틱코미디/멜로/로맨스    사극/시대극       코미디     애니메이션     다큐멘터리        공포        기타  \\\n","1       0.045455  0.015152  0.060606  0.015152       0.0  0.015152  0.030303   \n","2       0.110236  0.007874  0.031496  0.007874       0.0  0.031496  0.007874   \n","3         0.1125     0.025   0.04375   0.00625       0.0       0.0    0.0125   \n","4       0.111111  0.071429  0.047619  0.007937  0.007937  0.007937  0.007937   \n","5       0.103774  0.028302  0.028302  0.028302  0.018868       0.0  0.028302   \n","6       0.099526  0.052133  0.037915  0.023697       0.0  0.004739  0.018957   \n","7       0.094444  0.133333  0.022222  0.005556  0.061111       0.0  0.022222   \n","8       0.265625  0.046875  0.015625    0.0625       0.0  0.015625  0.015625   \n","9       0.316667  0.008333  0.041667  0.008333       0.0     0.025  0.016667   \n","10      0.296774  0.032258  0.019355  0.012903       0.0  0.019355  0.006452   \n","11          0.25  0.033333  0.008333       0.1       0.0  0.016667  0.008333   \n","12      0.201923  0.028846  0.038462  0.163462  0.009615  0.028846       0.0   \n","13      0.163462  0.048077  0.028846  0.043269  0.004808  0.009615       0.0   \n","14          0.28  0.068571  0.017143  0.005714  0.051429  0.017143  0.028571   \n","\n","     합계  \n","1   1.0  \n","2   1.0  \n","3   1.0  \n","4   1.0  \n","5   1.0  \n","6   1.0  \n","7   1.0  \n","8   1.0  \n","9   1.0  \n","10  1.0  \n","11  1.0  \n","12  1.0  \n","13  1.0  \n","14  1.0  "],"text/html":["\n","  <div id=\"df-68064bf2-0b3c-41c0-bd23-3a62d31e49c1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>연령대</th>\n","      <th>액션/서부극(웨스턴)</th>\n","      <th>SF/무협/판타지/어드벤처</th>\n","      <th>드라마</th>\n","      <th>범죄/수사/추리/스릴러</th>\n","      <th>로맨틱코미디/멜로/로맨스</th>\n","      <th>사극/시대극</th>\n","      <th>코미디</th>\n","      <th>애니메이션</th>\n","      <th>다큐멘터리</th>\n","      <th>공포</th>\n","      <th>기타</th>\n","      <th>합계</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0~18세 남성</td>\n","      <td>0.393939</td>\n","      <td>0.287879</td>\n","      <td>0.060606</td>\n","      <td>0.075758</td>\n","      <td>0.045455</td>\n","      <td>0.015152</td>\n","      <td>0.060606</td>\n","      <td>0.015152</td>\n","      <td>0.0</td>\n","      <td>0.015152</td>\n","      <td>0.030303</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>19~23세 남성</td>\n","      <td>0.370079</td>\n","      <td>0.228346</td>\n","      <td>0.102362</td>\n","      <td>0.102362</td>\n","      <td>0.110236</td>\n","      <td>0.007874</td>\n","      <td>0.031496</td>\n","      <td>0.007874</td>\n","      <td>0.0</td>\n","      <td>0.031496</td>\n","      <td>0.007874</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>24~29세 남성</td>\n","      <td>0.33125</td>\n","      <td>0.21875</td>\n","      <td>0.1625</td>\n","      <td>0.0875</td>\n","      <td>0.1125</td>\n","      <td>0.025</td>\n","      <td>0.04375</td>\n","      <td>0.00625</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0125</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>30~34세 남성</td>\n","      <td>0.373016</td>\n","      <td>0.166667</td>\n","      <td>0.15873</td>\n","      <td>0.039683</td>\n","      <td>0.111111</td>\n","      <td>0.071429</td>\n","      <td>0.047619</td>\n","      <td>0.007937</td>\n","      <td>0.007937</td>\n","      <td>0.007937</td>\n","      <td>0.007937</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>35~39세 남성</td>\n","      <td>0.471698</td>\n","      <td>0.198113</td>\n","      <td>0.075472</td>\n","      <td>0.018868</td>\n","      <td>0.103774</td>\n","      <td>0.028302</td>\n","      <td>0.028302</td>\n","      <td>0.028302</td>\n","      <td>0.018868</td>\n","      <td>0.0</td>\n","      <td>0.028302</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>40~49세 남성</td>\n","      <td>0.421801</td>\n","      <td>0.222749</td>\n","      <td>0.085308</td>\n","      <td>0.033175</td>\n","      <td>0.099526</td>\n","      <td>0.052133</td>\n","      <td>0.037915</td>\n","      <td>0.023697</td>\n","      <td>0.0</td>\n","      <td>0.004739</td>\n","      <td>0.018957</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>50~90세 남성</td>\n","      <td>0.361111</td>\n","      <td>0.127778</td>\n","      <td>0.111111</td>\n","      <td>0.061111</td>\n","      <td>0.094444</td>\n","      <td>0.133333</td>\n","      <td>0.022222</td>\n","      <td>0.005556</td>\n","      <td>0.061111</td>\n","      <td>0.0</td>\n","      <td>0.022222</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0~18세 여성</td>\n","      <td>0.0625</td>\n","      <td>0.15625</td>\n","      <td>0.1875</td>\n","      <td>0.171875</td>\n","      <td>0.265625</td>\n","      <td>0.046875</td>\n","      <td>0.015625</td>\n","      <td>0.0625</td>\n","      <td>0.0</td>\n","      <td>0.015625</td>\n","      <td>0.015625</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>19~23세 여성</td>\n","      <td>0.175</td>\n","      <td>0.208333</td>\n","      <td>0.125</td>\n","      <td>0.075</td>\n","      <td>0.316667</td>\n","      <td>0.008333</td>\n","      <td>0.041667</td>\n","      <td>0.008333</td>\n","      <td>0.0</td>\n","      <td>0.025</td>\n","      <td>0.016667</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>24~29세 여성</td>\n","      <td>0.23871</td>\n","      <td>0.129032</td>\n","      <td>0.109677</td>\n","      <td>0.135484</td>\n","      <td>0.296774</td>\n","      <td>0.032258</td>\n","      <td>0.019355</td>\n","      <td>0.012903</td>\n","      <td>0.0</td>\n","      <td>0.019355</td>\n","      <td>0.006452</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>30~34세 여성</td>\n","      <td>0.191667</td>\n","      <td>0.091667</td>\n","      <td>0.191667</td>\n","      <td>0.108333</td>\n","      <td>0.25</td>\n","      <td>0.033333</td>\n","      <td>0.008333</td>\n","      <td>0.1</td>\n","      <td>0.0</td>\n","      <td>0.016667</td>\n","      <td>0.008333</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>35~39세 여성</td>\n","      <td>0.096154</td>\n","      <td>0.105769</td>\n","      <td>0.259615</td>\n","      <td>0.067308</td>\n","      <td>0.201923</td>\n","      <td>0.028846</td>\n","      <td>0.038462</td>\n","      <td>0.163462</td>\n","      <td>0.009615</td>\n","      <td>0.028846</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>40~49세 여성</td>\n","      <td>0.221154</td>\n","      <td>0.144231</td>\n","      <td>0.254808</td>\n","      <td>0.081731</td>\n","      <td>0.163462</td>\n","      <td>0.048077</td>\n","      <td>0.028846</td>\n","      <td>0.043269</td>\n","      <td>0.004808</td>\n","      <td>0.009615</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>50~90세 여성</td>\n","      <td>0.148571</td>\n","      <td>0.091429</td>\n","      <td>0.245714</td>\n","      <td>0.045714</td>\n","      <td>0.28</td>\n","      <td>0.068571</td>\n","      <td>0.017143</td>\n","      <td>0.005714</td>\n","      <td>0.051429</td>\n","      <td>0.017143</td>\n","      <td>0.028571</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-68064bf2-0b3c-41c0-bd23-3a62d31e49c1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-68064bf2-0b3c-41c0-bd23-3a62d31e49c1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-68064bf2-0b3c-41c0-bd23-3a62d31e49c1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-58457971-032c-4fa2-a782-d0f4b7815de6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58457971-032c-4fa2-a782-d0f4b7815de6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-58457971-032c-4fa2-a782-d0f4b7815de6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_aa224db3-109e-4655-9e58-8963cc79f080\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('genre_favor_divided')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_aa224db3-109e-4655-9e58-8963cc79f080 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('genre_favor_divided');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"genre_favor_divided","repr_error":"0"}},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# 연령대와 성별에 따른 가중치 데이터프레임 생성\n","genre_weights_data = {\n","    '연령대': [\n","        '0~18세 남성', '19~23세 남성', '24~29세 남성', '30~34세 남성',\n","        '35~39세 남성', '40~49세 남성', '50~90세 남성',\n","        '0~18세 여성', '19~23세 여성', '24~29세 여성', '30~34세 여성',\n","        '35~39세 여성', '40~49세 여성', '50~90세 여성'\n","    ],\n","    '액션/서부극(웨스턴)': [\n","        0.393939, 0.370079, 0.33125, 0.373016, 0.471698, 0.421801, 0.361111,\n","        0.0625, 0.175, 0.23871, 0.191667, 0.096154, 0.221154, 0.148571\n","    ],\n","    'SF/무협/판타지/어드벤처': [\n","        0.287879, 0.228346, 0.21875, 0.166667, 0.198113, 0.222749, 0.127778,\n","        0.15625, 0.208333, 0.129032, 0.091667, 0.105769, 0.144231, 0.091429\n","    ],\n","    '드라마': [\n","        0.060606, 0.102362, 0.1625, 0.15873, 0.075472, 0.085308, 0.111111,\n","        0.1875, 0.125, 0.109677, 0.191667, 0.259615, 0.254808, 0.245714\n","    ],\n","    '범죄/수사/추리/스릴러': [\n","        0.075758, 0.102362, 0.0875, 0.039683, 0.018868, 0.033175, 0.061111,\n","        0.171875, 0.075, 0.135484, 0.108333, 0.067308, 0.081731, 0.045714\n","    ],\n","    '로맨틱코미디/멜로/로맨스': [\n","        0.045455, 0.110236, 0.1125, 0.111111, 0.103774, 0.099526, 0.094444,\n","        0.265625, 0.316667, 0.296774, 0.25, 0.201923, 0.163462, 0.28\n","    ],\n","    '사극/시대극': [\n","        0.015152, 0.007874, 0.025, 0.071429, 0.028302, 0.052133, 0.133333,\n","        0.046875, 0.008333, 0.032258, 0.033333, 0.028846, 0.048077, 0.068571\n","    ],\n","    '코미디': [\n","        0.060606, 0.031496, 0.04375, 0.047619, 0.028302, 0.037915, 0.022222,\n","        0.015625, 0.041667, 0.019355, 0.008333, 0.038462, 0.028846, 0.017143\n","    ],\n","    '애니메이션': [\n","        0.015152, 0.007874, 0.00625, 0.007937, 0.028302, 0.023697, 0.005556,\n","        0.0625, 0.008333, 0.012903, 0.1, 0.163462, 0.043269, 0.005714\n","    ],\n","    '다큐멘터리': [\n","        0.0, 0.0, 0.0, 0.007937, 0.0, 0.0, 0.061111,\n","        0.0, 0.0, 0.0, 0.0, 0.009615, 0.004808, 0.051429\n","    ],\n","    '공포': [\n","        0.015152, 0.031496, 0.0, 0.007937, 0.0, 0.004739, 0.0,\n","        0.015625, 0.025, 0.019355, 0.016667, 0.028846, 0.009615, 0.017143\n","    ],\n","    '기타': [\n","        0.030303, 0.007874, 0.0125, 0.007937, 0.028302, 0.018957, 0.022222,\n","        0.015625, 0.016667, 0.006452, 0.008333, 0.0, 0.0, 0.028571\n","    ],\n","    '합계': [\n","        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0\n","    ]\n","}\n","\n","# 데이터프레임 생성\n","genre_weights_df = pd.DataFrame(genre_weights_data)\n","\n","# 연령대와 성별을 받아 해당하는 가중치 행을 찾는 함수\n","def get_genre_weights(age, gender):\n","    # 성별에 따른 문자열 결정\n","\n","\n","    # 주어진 나이에 따라 연령대 범위를 결정\n","    if age == 10:\n","        age_range = '0~18세'\n","    elif age == 20:\n","        age_range = '19~23세'\n","    elif age == 30:\n","        age_range = '30~34세'\n","    elif age == 40:\n","        age_range = '40~49세'\n","    elif age == 50:\n","        age_range = '50~90세'\n","    elif age >= 60:\n","        age_range = '50~90세'\n","    else:\n","        raise ValueError(\"유효하지 않은 나이 범위입니다.\")\n","\n","    age_gender_key = f\"{age_range} {gender}\"\n","\n","    # 해당 연령대와 성별에 맞는 가중치 행 선택 및 평균 계산\n","    if age_gender_key == '19~23세 남성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '24~29세 남성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    elif age_gender_key == '30~34세 남성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '35~39세 남성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    elif age_gender_key == '19~23세 여성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '24~29세 여성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    elif age_gender_key == '30~34세 여성':\n","        weights = (genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].reset_index(drop=True).iloc[:, 1:] +\n","                   genre_weights_df.loc[genre_weights_df['연령대'] == '35~39세 여성'].reset_index(drop=True).iloc[:, 1:]) / 2\n","    else:\n","        weights = genre_weights_df.loc[genre_weights_df['연령대'] == age_gender_key].iloc[:, 1:]\n","\n","    return weights\n"],"metadata":{"id":"ZIA57bhJDVgb","executionInfo":{"status":"ok","timestamp":1723273431678,"user_tz":-540,"elapsed":3,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":50,"outputs":[]},{"cell_type":"code","source":["movie_name_genre= pd.read_pickle('/content/movie_genre13306.pkl')\n","movie_name_genre=pd.DataFrame(movie_name_genre)"],"metadata":{"id":"ki6lF4T_xL9p","executionInfo":{"status":"ok","timestamp":1723273444486,"user_tz":-540,"elapsed":2,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["import re\n","\n","# CSV 파일을 Pandas DataFrame으로 불러오기\n","file_path = '/content/movie_data'\n","data = pd.read_csv(file_path)\n","\n","# 'Unnamed: 0' 열 제거\n","data = data.drop(columns=['Unnamed: 0'])\n","\n","# 열 이름을 한국어로 설정\n","data.columns = ['영화명', '평점', '연도', '상영시간', '연령', '감독', '출연진', '줄거리', '장르']\n","\n","pd.set_option('display.max_columns', None)\n","\n","\n","# 한국어 불용어 정의\n","stop_words_ko = {\"및\", \"도\", \"에\", \"의\", \"가\", \"이\", \"은\", \"는\", \"을\", \"를\", \"에서\", \"로\", \"과\", \"와\", \"한\", \"그\", \"이\", \"하\", \"여\", \"속\", \"전\", \"자\", \"이다\"}\n","\n","# 장르 동의어 매핑 생성\n","genre_synonyms_ko = {\n","    '공포': ['공포', '호러', '스릴러', '무서운'],\n","    '로맨스': ['로맨스', '사랑', '연애', '로맨틱'],\n","    '멜로': ['멜로', '멜로드라마'],\n","    '액션': ['액션', '모험', '전투', '스릴'],\n","    '코미디': ['코미디', '웃긴', '유머', '희극'],\n","    '서부': ['서부', '웨스턴', '카우보이', '서부극', 'western'],\n","}"],"metadata":{"id":"pmH5PQgdP-_e","executionInfo":{"status":"ok","timestamp":1723273456183,"user_tz":-540,"elapsed":11698,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["# 장르 동의어를 정규화하는 함수\n","def normalize_genre_from_synonyms_ko(keyword):\n","    keyword = keyword.strip().lower()\n","    for genre, synonyms in genre_synonyms_ko.items():\n","        if keyword in [synonym.lower() for synonym in synonyms]:\n","            return genre\n","    return keyword\n","\n","# 장르 정규화 함수 (괄호 및 슬래시 처리 포함)\n","def normalize_genre(text):\n","    if pd.isna(text):\n","        return ''\n","    text = re.sub(r'\\s*\\(/?\\s*|\\s*/\\s*|\\s*\\)\\s*', ',', text)\n","    text = re.sub(r'\\s+', ' ', text)\n","    genres = [normalize_genre_from_synonyms_ko(genre.strip()) for genre in text.split(',')]\n","    return ','.join(sorted(set(genres)))\n","\n"],"metadata":{"id":"LZh765PoQOoB","executionInfo":{"status":"ok","timestamp":1723273456183,"user_tz":-540,"elapsed":2,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":54,"outputs":[]},{"cell_type":"code","source":["def preprocessing(user_input, komoran, remove_stopwords=False, stop_words=[]):\n","    # 한글, 숫자, S/F 문자만 남김\n","    review_text = re.sub(\"[^가-힣ㄱ-ㅎㅏ-ㅣ0-9\\\\sSFsf]\", \"\", user_input)\n","\n","    # 형태소 분석\n","    word_review = komoran.pos(review_text, flatten=False)\n","\n","    # 고유명사(NNP)와 일반명사(NNG)를 분리\n","    filtered_review = []      # 고유명사(NNP)만 담을 리스트\n","    nnp_and_nng_review = []   # 고유명사(NNP)와 일반명사(NNG) 모두 담을 리스트\n","\n","    for sentence in word_review:  # 문장 단위로 분리된 리스트\n","        for word, tag in sentence:\n","            if tag == 'NNP':\n","                filtered_review.append((word, tag))  # 고유명사만 담기\n","                nnp_and_nng_review.append((word, tag))  # 고유명사도 같이 담기\n","            elif tag == 'NNG':\n","                nnp_and_nng_review.append((word, tag))  # 일반명사 담기\n","\n","    if remove_stopwords:\n","        filtered_review = [token for token in filtered_review if not token[0] in stop_words]\n","        nnp_and_nng_review = [token for token in nnp_and_nng_review if not token[0] in stop_words]\n","\n","    return filtered_review, nnp_and_nng_review\n","\n","def find_matching_movie(filtered_review, movie_name_genre):\n","    # filtered_review가 비어 있지 않은 경우에만 수행\n","    if filtered_review:\n","        for word, tag in filtered_review:\n","            for movie_name in movie_name_genre['영화명']:\n","                if re.search(word, movie_name):\n","                    return movie_name_genre[movie_name_genre['영화명'] == movie_name]\n","\n","    return None\n","\n","def find_matching_cast(filtered_review, cast_members):\n","    # filtered_review가 비어 있지 않은 경우에만 수행\n","    if filtered_review:\n","        matching_cast = []\n","        for word, tag in filtered_review:\n","            if word in cast_members:\n","                matching_cast.append(word)\n","\n","        return matching_cast[0] if matching_cast else None\n","\n","    return None\n","\n","def find_matching_director(filtered_review, directors):\n","    # filtered_review가 비어 있지 않은 경우에만 수행\n","    if filtered_review:\n","        matching_director = []\n","        for word, tag in filtered_review:\n","            if word in directors:\n","                matching_director.append(word)\n","\n","        return matching_director[0] if matching_director else None\n","\n","    return None\n","\n","def find_matching_genre(nnp_and_nng_review, genres):\n","    # nnp_and_nng_review가 비어 있지 않은 경우에만 수행\n","    if nnp_and_nng_review:\n","        matching_genres = []\n","        genre_list = genres  # 장르 목록을 리스트로 변환하여 일치 여부를 빠르게 검사\n","\n","        for word, tag in nnp_and_nng_review:\n","            # 명사 사이에 띄어쓰기가 있을 경우, 분리하여 장르를 찾기\n","            words_to_check = word.split()  # 띄어쓰기로 분리된 단어들\n","\n","            for w in words_to_check:\n","                if w in genre_list:\n","                    matching_genres.append(w)\n","\n","        # 중복된 장르를 제거하기 위해 set을 사용한 후 리스트로 변환\n","        matching_genres = list(set(matching_genres))\n","        return ', '.join(matching_genres)\n","\n","    return None\n","\n","# # 예시 문장\n","# user_input = \"키즈모노가타리같은 애니 영화 추천 해줘?\"\n","# recommend_stop_words = set(['은', '는', '이', '가', '하', '아', '것', '들','의', '있', '되', '수', '보', '주', '등', '한', '해주다', '과', '영화', '출연', '등장', '하다'])\n","\n","\n","\n","# # 전처리 및 명사 필터링\n","# filtered_review, nnp_and_nng_review = preprocessing(review, komoran, remove_stopwords=False, stop_words=recommend_stop_words)\n","\n","# # 일치하는 영화명 찾기\n","# matching_movie_info = find_matching_movie(filtered_review, movie_name_genre)\n","\n","# # 일치하는 출연진 찾기\n","# matching_cast = find_matching_cast(filtered_review, cast_members)\n","\n","# # 일치하는 장르 찾기\n","# matching_genres = find_matching_genre(nnp_and_nng_review, genres)\n","\n","# # 일치하는 감독 찾기\n","# matching_director = find_matching_genre(filtered_review, directors)\n","\n","# print(\"고유명사(NNP)만 추출한 결과:\", filtered_review)\n","# print(\"고유명사(NNP)와 일반명사(NNG) 추출한 결과:\", nnp_and_nng_review)\n","# print(\"일치하는 영화 정보:\", matching_movie_info)\n","# print(\"일치하는 출연진:\", matching_cast)\n","# print(\"일치하는 감독:\", matching_director)\n","# print(\"일치하는 장르:\", matching_genres)"],"metadata":{"id":"n-t4Zc5ABiek","executionInfo":{"status":"ok","timestamp":1723273456183,"user_tz":-540,"elapsed":2,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["# 영화 정보 딕셔너리 생성\n","movie_info = {}\n","for i, row in data.iterrows():\n","    movie_id = i\n","    content = row.to_dict()\n","    movie_info[movie_id] = content\n","\n","# 영화 제목과 정보를 매핑하는 새로운 DataFrame 생성\n","movie_titles = data[['영화명']].rename(columns={'영화명': '제목'})\n","movie_titles['info'] = movie_titles.index.map(lambda x: movie_info[x])\n","\n","# DataFrame의 장르 정규화\n","movie_titles['info'] = movie_titles['info'].apply(lambda x: {**x, '장르': normalize_genre(x['장르'])})"],"metadata":{"id":"ihNuySsf2RNT","executionInfo":{"status":"ok","timestamp":1723273459473,"user_tz":-540,"elapsed":3291,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":56,"outputs":[]},{"cell_type":"code","source":["# 장르로 영화 추천\n","def recommend_movies_by_genre(genre):\n","    normalized_genre = normalize_genre_from_synonyms_ko(genre)\n","    recommended_movies = movie_titles[movie_titles['info'].apply(lambda x: '장르' in x and normalized_genre in x['장르'])]\n","    return recommended_movies[['제목', 'info']]\n","\n","# 감독 또는 출연 배우로 영화 추천\n","def recommend_movies_by_person(person_name):\n","    person_name = person_name.strip().lower()\n","    recommended_movies = movie_titles[movie_titles['info'].apply(\n","        lambda x: ('감독' in x and person_name in x['감독'].strip().lower())\n","    ) | movie_titles['info'].apply(\n","        lambda x: ('출연진' in x and person_name in x['출연진'].strip().lower())\n","    )]\n","    return recommended_movies[['제목', 'info']]\n","\n","# 장르 목록을 가져오는 함수\n","def get_genres():\n","    genres = set()\n","    for info in movie_titles['info']:\n","        if '장르' in info:\n","            text = info['장르']\n","            genres.update([normalize_genre_from_synonyms_ko(genre.strip()) for genre in text.split(',')])\n","    return sorted(genres)\n","\n","# 영화 제목으로 정보를 가져오는 함수\n","def get_movie_info(title):\n","    filtered_title = title.strip()\n","    matching_titles = movie_titles[movie_titles['제목'].str.contains(filtered_title, na=False)]\n","\n","    if matching_titles.empty:\n","        return f\"영화를 찾지 못했습니다: {title}\"\n","\n","    movie_id = matching_titles.index[0]\n","    return movie_titles[movie_titles.index == movie_id]['info'].iloc[0]"],"metadata":{"id":"M3ZfuJw9Q325","executionInfo":{"status":"ok","timestamp":1723273459473,"user_tz":-540,"elapsed":2,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":57,"outputs":[]},{"cell_type":"code","source":["# 영화명, 감독, 출연 배우, 장르 및 인물 찾기\n","genres = get_genres()\n","# movies = data['영화명'].dropna().apply(lambda x: x.split(', ')).explode().unique()\n","directors = data['감독'].dropna().apply(lambda x: x.split(', ')).explode().unique()\n","cast_members = data['출연진'].dropna().apply(lambda x: x.split(', ')).explode().unique()"],"metadata":{"id":"HDB3PVG2S0Mu","executionInfo":{"status":"ok","timestamp":1723273459948,"user_tz":-540,"elapsed":477,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":58,"outputs":[]},{"cell_type":"code","source":["movie_name_genre['text']= movie_name_genre['영화명'] +' '+ movie_name_genre['장르']\n"],"metadata":{"id":"EhjeU3IfofqG","executionInfo":{"status":"ok","timestamp":1723273459948,"user_tz":-540,"elapsed":1,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","\n","def get_recommendations(movie_title=None, genre=None, director=None, actor=None, gender=None, age=None, favored_genres=None, cosine_sim=None, nnp_and_nng_review=None):\n","\n","    filtered_data = data.copy()\n","    weights = {'genre_weight': 0.0, 'director_weight': 0.0}\n","    entered_criteria = 0\n","\n","    if genre:\n","        weights['genre_weight'] = 0.2\n","        entered_criteria += 1\n","    if director:\n","        weights['director_weight'] = 0.2\n","        entered_criteria += 1\n","    if actor:\n","        weights['actor_weight'] = 0.2\n","        entered_criteria += 1\n","    if entered_criteria > 0:\n","        equal_weight = 1.0 / entered_criteria\n","        for key in weights.keys():\n","            if weights[key] == 0.0:\n","                weights[key] = equal_weight\n","\n","    if favored_genres:\n","        weights['favored_genre_weight'] = 0.1\n","\n","    if gender and age:\n","        genre_weights = get_genre_weights(age, gender)\n","        print(genre_weights)\n","\n","    if movie_title:\n","        if movie_title not in data['영화명'].values:\n","            tfidf_title_genre = tfidf.transform([tokenize_and_lemmatize(movie_name_genre[movie_name_genre['영화명'] == movie_title]['text'].values[0])])\n","            cosine_sim_title = linear_kernel(tfidf_title_genre, tfidf_matrix)\n","            sim_scores = list(enumerate(cosine_sim_title[0]))\n","\n","            for i, (idx, score) in enumerate(sim_scores):\n","                genre_score = 0\n","                if genre:\n","                    serched_m_genres = [g.strip().lower() for g in data.loc[idx, '장르'].split(',')]\n","                    if genre.strip().lower() in serched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                director_score = weights['director_weight'] if director and director in data.loc[idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[idx, '출연진'] else 0\n","\n","                genre_list = data.loc[idx, '장르'].split(',')\n","                genre_weight_score = 0\n","                genre_weights_list = []\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)\n","                                break\n","\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score /= 2\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)\n","\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                total_score = score + genre_score + director_score + actor_score + genre_weight_score + favored_genre_weight_score\n","                sim_scores[i] = (idx, total_score)\n","\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","            sim_scores = sim_scores[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            recommendations = data.iloc[movie_indices]\n","            similarity_scores = [i[1] for i in sim_scores]\n","            return recommendations[['영화명', '장르']].values.tolist(), similarity_scores\n","        else:\n","            idx = data[data['영화명'] == movie_title].index[0]\n","            filtered_indices = filtered_data.index\n","            sim_scores = []\n","\n","            for filtered_idx in filtered_indices:\n","                if filtered_idx == idx:\n","                    continue\n","                sim_score = cosine_sim[idx, filtered_idx]  # Ensure cosine_sim is a numpy array\n","\n","                genre_score = 0\n","                if genre:\n","                    serched_m_genres = [g.strip().lower() for g in data.loc[filtered_idx, '장르'].split(',')]\n","                    if genre.strip().lower() in serched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                director_score = weights['director_weight'] if director and director in data.loc[filtered_idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[filtered_idx, '출연진'] else 0\n","\n","                genre_list = data.loc[filtered_idx, '장르'].split(',')\n","                genre_weight_score = 0\n","                genre_weights_list = []\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)\n","                                break\n","\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score /= 2\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)\n","\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                total_score = sim_score + genre_score + director_score + actor_score + genre_weight_score + favored_genre_weight_score\n","                sim_scores.append((filtered_idx, total_score))\n","\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","            sim_scores = sim_scores[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            recommendations = data.iloc[movie_indices]\n","            similarity_scores = [i[1] for i in sim_scores]\n","            return recommendations[['영화명', '장르']].values.tolist(), similarity_scores\n","    else:\n","        sim_scores = []\n","        if nnp_and_nng_review and any(word == '내용' or word == '줄거리' for word, tag in nnp_and_nng_review):\n","            user_tfidf_vector = tfidf.transform([tokenize_and_lemmatize[user_input]])\n","            cosine_sim_user = linear_kernel(user_tfidf_vector, tfidf_matrix)\n","            for idx in filtered_data.index:\n","                sim_score = cosine_sim_user[0, idx]\n","                total_score = sim_score  # Add additional weights if necessary\n","                sim_scores.append((idx, total_score))\n","        else:\n","            for idx in filtered_data.index:\n","                genre_score = 0\n","                year_score = 0\n","\n","                similar_words = ['최신', '최근', '새로운', '신작', '최신작', '최근 개봉한', '개봉한', '요즘', '개봉작', '유행']\n","                if any(word in similar_words for word, tag in nnp_and_nng_review):\n","                    if data.loc[idx, '연도'] == 2024:\n","                        year_score = 2\n","\n","                if genre:\n","                    searched_m_genres = [g.strip().lower() for g in data.loc[idx, '장르'].split(',')]\n","                    if genre.strip().lower() in searched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                director_score = weights['director_weight'] if director and director in data.loc[idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[idx, '출연진'] else 0\n","\n","                genre_list = data.loc[idx, '장르'].split(',')\n","                genre_weight_score = 0\n","                genre_weights_list = []\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)\n","                                break\n","\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score /= 2\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)\n","\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                total_score = genre_score + director_score + actor_score + genre_weight_score + favored_genre_weight_score + year_score\n","                sim_scores.append((idx, total_score))\n","\n","        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","        sim_scores = sim_scores[:5]\n","        movie_indices = [i[0] for i in sim_scores]\n","        recommendations = data.iloc[movie_indices]\n","        similarity_scores = [i[1] for i in sim_scores]\n","        return recommendations[['영화명', '장르']].values.tolist(), similarity_scores\n"],"metadata":{"id":"PcPAZG1lEZCB","executionInfo":{"status":"ok","timestamp":1723273460426,"user_tz":-540,"elapsed":2,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":60,"outputs":[]},{"cell_type":"code","source":["def get_recommendations(movie_title=None, genre=None, director=None, actor = None, gender=None, age=None, favored_genres=None, cosine_sim=cosine_sim, nnp_and_nng_review=None):\n","\n","    filtered_data = data.copy()\n","\n","    # 기본 가중치 설정\n","    weights = {'genre_weight': 0.0, 'director_weight': 0.0}\n","    entered_criteria = 0\n","\n","    # 입력된 조건에 대해 가중치 증가\n","    if genre:\n","        weights['genre_weight'] = 0.2\n","        entered_criteria += 1\n","    if director:\n","        weights['director_weight'] = 0.2\n","        entered_criteria += 1\n","    if actor:\n","        weights['actor_weight'] = 0.2\n","        entered_criteria += 1\n","    if entered_criteria > 0:\n","        equal_weight = 1.0 / entered_criteria\n","        for key in weights.keys():\n","            if weights[key] == 0.0:\n","                weights[key] = equal_weight\n","\n","    #가입 할 때 기입하는 선호 장르 가중치\n","    if favored_genres:\n","        weights['favored_genre_weight'] = 0.1\n","\n","    # 연령과 성별에 따른 장르 가중치 계산\n","    if gender and age:\n","        genre_weights = get_genre_weights(age, gender)  # 여성일 때 드라마 장르 가중치\n","        print(genre_weights)\n","\n","\n","    if movie_title:\n","        if movie_title not in data['영화명'].values:\n","            # 코사인 유사도 계산 없이 가장 유사한 영화명 추천\n","            tfidf_title_genre = tfidf.transform([tokenize_and_lemmatize(movie_name_genre[movie_name_genre['영화명']==movie_title]['text'].values[0])])\n","            cosine_sim_title = linear_kernel(tfidf_title_genre, tfidf_matrix)\n","            sim_scores = list(enumerate(cosine_sim_title[0]))\n","\n","            # 입력조건, 연령과 성별에 따른 장르 가중치 적용\n","            for i, (idx, score) in enumerate(sim_scores):\n","                #입력 조건 가중치 적용\n","                #장르 가중치\n","                genre_score = 0\n","                if genre:\n","                    serched_m_genres = [g.strip().lower() for g in data.loc[idx, '장르'].split(',')]\n","                    if genre.strip().lower() in serched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                #감독, 배우 가중치\n","                director_score = weights['director_weight'] if director and director in data.loc[idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[idx, '출연진'] else 0\n","\n","                #해당 영화의 장르 확인\n","                genre_list = data.loc[idx, '장르'].split(',')\n","\n","                # 초기화\n","                genre_weight_score = 0\n","                # 장르 가중치 리스트 초기화\n","                genre_weights_list = []\n","\n","                # 장르 가중치 계산\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)  # 각 장르 가중치를 리스트에 추가\n","                                break\n","\n","                    # 가장 큰 두 개의 가중치를 선택하여 합산\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score = genre_weight_score/2  # 두 개의 가중치를 반영한 점수 계산\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)  # 장르가 두 개 미만일 경우 모든 가중치를 합산\n","\n","                # 선호 장르 가중치 적용\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                # 기존 점수와 새로운 가중치를 반영한 점수 계산\n","                total_score = score + genre_score + director_score + actor_score +  genre_weight_score + favored_genre_weight_score\n","                # 디버깅 또는 로그 출력을 위해 idx와 관련 정보를 출력\n","                # print(f'Idx: {idx}, Movie Title: {data.loc[idx, \"영화명\"]}, '\n","                #     f'Similarity: {score}, Genre Score: {genre_score}, '\n","                #     f'Director Score: {director_score},'\n","                #     f'Genre Weight Score: {genre_weight_score},'\n","                #     f'favored_genre_weight_score: {favored_genre_weight_score},'\n","                #     f'Total Score: {total_score}' )\n","\n","                # 최종 점수와 함께 저장\n","                sim_scores[i] = (idx, total_score)\n","            print(movie_title,genre,director,actor)\n","            # 유사도 순으로 정렬\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","            print(sim_scores)\n","            sim_scores = sim_scores[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            recommendations = data.iloc[movie_indices]\n","\n","            # 시각화를 위한 유사도 점수 포함\n","            similarity_scores = [i[1] for i in sim_scores]\n","            return recommendations[['영화명','장르']].values.tolist(), similarity_scores\n","        else: #영화 제목이 데이터에 있는 경우\n","            # 영화명에 해당하는 인덱스 가져오기\n","            idx = data[data['영화명'] == movie_title].index[0]\n","\n","            # 필터링된 데이터 내에서 영화명과 유사한 영화들을 추천하기 위해 코사인 유사도 계산\n","            filtered_indices = filtered_data.index\n","\n","            sim_scores = []\n","            for filtered_idx in filtered_indices:\n","                if filtered_idx == idx:\n","                    continue  # 자기 자신은 제외\n","                sim_score = cosine_sim[idx, filtered_idx]\n","\n","\n","                # 가중치 적용\n","                #장르 가중치\n","                genre_score = 0\n","                if genre:\n","                    serched_m_genres = [g.strip().lower() for g in data.loc[filtered_idx, '장르'].split(',')]\n","                    if genre.strip().lower() in serched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                #감독, 배우 가중치\n","                director_score = weights['director_weight'] if director and director in data.loc[filtered_idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[filtered_idx, '출연진'] else 0\n","\n","\n","                #해당 영화의 장르 확인\n","                genre_list = data.loc[filtered_idx, '장르'].split(',')\n","\n","\n","                # 초기화\n","                genre_weight_score = 0\n","                # 장르 가중치 리스트 초기화\n","                genre_weights_list = []\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)  # 각 장르 가중치를 리스트에 추가\n","                                break\n","\n","                    # 가장 큰 두 개의 가중치를 선택하여 합산\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score = genre_weight_score/2  # 두 개의 가중치를 반영한 점수 계산\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)  # 장르가 두 개 미만일 경우 모든 가중치를 합산\n","\n","                # 선호 장르 가중치 적용\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                # 기존 점수와 새로운 가중치를 반영한 점수 계산\n","                total_score = sim_score + genre_score + director_score + actor_score + genre_weight_score + favored_genre_weight_score\n","                # 디버깅 또는 로그 출력을 위해 idx와 관련 정보를 출력\n","                sim_scores.append((filtered_idx, total_score))\n","            #     print(f'Idx: {filtered_idx}, Movie Title: {data.loc[filtered_idx, \"영화명\"]}, '\n","            #         # f'Similarity: {sim_score}, Genre Score: {genre_score}, '\n","            #         # f'Director Score: {director_score},'\n","            #         # f'Actor Score: {actor_score},'\n","            #         # f'Genre Weight Score: {genre_weight_score},'\n","            #         # f'favored_genre_weight_score: {favored_genre_weight_score},'\n","            #         # f'Total Score: {total_score}' )\n","            # # 유사도 순으로 정렬\n","            sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","            print(sim_scores)\n","            # 상위 5개 추천\n","            sim_scores = sim_scores[:5]\n","            movie_indices = [i[0] for i in sim_scores]\n","            recommendations = data.iloc[movie_indices]\n","\n","            # 시각화를 위한 유사도 점수 포함\n","            similarity_scores = [i[1] for i in sim_scores]\n","            return recommendations[['영화명','장르']].values.tolist(), similarity_scores\n","    else:\n","        # movie_title이 없는 경우\n","        sim_scores = []\n","        print(\"nnp_and_nng_review 내용:\", nnp_and_nng_review)\n","        # \"내용\" 단어가 포함된 경우와 포함되지 않은 경우를 나누어 처리\n","        if any(word == '내용' or word == '줄거리' for word, tag in nnp_and_nng_review):\n","            # user_input을 벡터화한 것과 영화를 비교하는 로직\n","            user_tfidf_vector = tfidf.transform([tokenize_and_lemmatize[user_input]])\n","            cosine_sim_user = linear_kernel(user_tfidf_vector, tfidf_matrix)\n","            for idx in filtered_data.index:\n","                sim_score = cosine_sim_user[0, idx]\n","                # 코사인 유사도에 다른 가중치 적용하는 부분은 이전 코드와 유사합니다.\n","                # ...\n","\n","                # 최종 점수 계산 및 저장\n","                total_score = sim_score  # 여기에 필요한 가중치를 추가하여 계산\n","                sim_scores.append((idx, total_score))\n","            print('+++++++++++++++++++++++++++++++++++')\n","        else:\n","            # 기존 코드: 유사도 기반이 아닌 가중치에 따른 추천 로직\n","            for idx in filtered_data.index:\n","                genre_score = 0\n","                year_score = 0\n","\n","                # '최신'과 유사한 단어가 있는지 확인하여 연도에 따라 점수 부여\n","                similar_words = ['최신', '최근', '새로운', '신작', '최신작', '최근 개봉한', '개봉한', '요즘', '개봉작', '유행']\n","                if any(word in similar_words for word, tag in nnp_and_nng_review):\n","                    if data.loc[idx, '연도'] == 2024:\n","                        year_score = 2\n","\n","                # 장르 점수 계산\n","                if genre:\n","                    searched_m_genres = [g.strip().lower() for g in data.loc[idx, '장르'].split(',')]\n","                    if genre.strip().lower() in searched_m_genres:\n","                        genre_score = weights['genre_weight']\n","\n","                # 감독, 배우 점수 계산\n","                director_score = weights['director_weight'] if director and director in data.loc[idx, '감독'] else 0\n","                actor_score = weights['actor_weight'] if actor and actor in data.loc[idx, '출연진'] else 0\n","\n","                # 장르 가중치 계산\n","                genre_list = data.loc[idx, '장르'].split(',')\n","                genre_weight_score = 0\n","                genre_weights_list = []\n","                if gender and age:\n","                    for genre1 in genre_list:\n","                        genre1 = genre1.strip()\n","                        for column in genre_weights.columns:\n","                            if any(genre_part.strip() == genre1 for genre_part in column.split('/')):\n","                                genre_weight = genre_weights[column].values[0]\n","                                genre_weights_list.append(genre_weight)\n","                                break\n","\n","                    if len(genre_weights_list) >= 2:\n","                        genre_weights_list.sort(reverse=True)\n","                        genre_weight_score = genre_weights_list[0] + genre_weights_list[1]\n","                        genre_weight_score /= 2\n","                    else:\n","                        genre_weight_score = sum(genre_weights_list)\n","\n","                # 선호 장르 가중치 적용\n","                favored_genre_weight_score = 0\n","                if favored_genres:\n","                    for favor_genre in favored_genres:\n","                        if favor_genre in genre_list:\n","                            favored_genre_weight_score += weights['favored_genre_weight']\n","\n","                print('-----------------')\n","\n","                # 최종 점수 계산\n","                total_score = genre_score + director_score + actor_score + genre_weight_score + favored_genre_weight_score + year_score\n","                sim_scores.append((idx, total_score))\n","\n","        # 유사도 순으로 정렬 및 상위 5개 출력\n","        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n","        sim_scores = sim_scores[:5]\n","        movie_indices = [i[0] for i in sim_scores]\n","        recommendations = data.iloc[movie_indices]\n","        similarity_scores = [i[1] for i in sim_scores]\n","        return recommendations[['영화명', '장르']].values.tolist(), similarity_scores"],"metadata":{"id":"VJGX513xEfe9","executionInfo":{"status":"ok","timestamp":1723273460925,"user_tz":-540,"elapsed":500,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["\n","\n","def get_user_input():\n","    \"\"\"사용자 입력을 받아 전처리 후 반환\"\"\"\n","    user_input = input(\"영화 제목, 원하는 장르, 감독 또는 출연 배우를 입력하세요 (예: 공포, 액션, 멜로, 서부, 로버트 다우니 주니어): \")\n","    gender_input = input(\"사용자의 성별을 입력하세요 (남성, 여성) (입력하지 않으면 무시됩니다): \").strip()\n","    age_input = input(\"사용자의 나이를 입력하세요 (입력하지 않으면 무시됩니다): \").strip()\n","    favored_genres_input = input(\"사용자의 선호 장르를 입력하세요 (입력하지 않으면 무시됩니다): \").strip()\n","\n","    gender = gender_input if gender_input else None\n","    age = int(age_input) if age_input.isdigit() else None\n","    favored_genres = favored_genres_input.split() if favored_genres_input else None\n","\n","    return user_input, gender, age, favored_genres\n","\n","def process_user_input(user_input):\n","    \"\"\"사용자 입력을 전처리하고 영화 정보 검색\"\"\"\n","    filtered_review, nnp_and_nng_review = preprocessing(user_input, komoran, remove_stopwords=False, stop_words=[])\n","\n","    print(\"처리된 입력 결과:\")\n","    print(\"고유명사(NNP)만 추출한 결과:\", filtered_review)\n","    print(\"고유명사(NNP)와 일반명사(NNG) 추출한 결과:\", nnp_and_nng_review)\n","\n","    # 영화, 감독, 장르, 인물 검색\n","    movie_found = find_matching_movie(filtered_review, movie_name_genre)\n","    director_found = find_matching_director(filtered_review, directors)\n","    genre_found = find_matching_genre(nnp_and_nng_review, genres)\n","    person_found = find_matching_cast(filtered_review, cast_members)\n","\n","    print(\"찾은 영화:\", movie_found)\n","    print(\"찾은 감독:\", director_found)\n","    print(\"찾은 장르:\", genre_found)\n","    print(\"찾은 인물:\", person_found)\n","\n","    return filtered_review, nnp_and_nng_review, movie_found, genre_found, director_found, person_found\n","\n","def display_recommendations(movie_title, genre, director, actor, gender, age, favored_genres):\n","    \"\"\"영화 추천 결과를 출력\"\"\"\n","    recommendations, similarity_scores = get_recommendations(movie_title, genre, director, actor, gender, age, favored_genres)\n","    print(\"추천된 영화:\")\n","    print(recommendations)\n","    print(\"유사도 점수:\")\n","    print(similarity_scores)\n","\n","def visualize_recommendations(recommendations, similarity_scores):\n","    \"\"\"추천된 영화와 유사도 점수를 시각화\"\"\"\n","    # 추천된 영화 목록을 데이터프레임으로 변환\n","    # 열 이름을 recommendations 데이터에 맞게 조정합니다.\n","    if len(recommendations[0]) == 2:\n","        df = pd.DataFrame(recommendations, columns=['영화명', '장르'])\n","    elif len(recommendations[0]) == 4:\n","        df = pd.DataFrame(recommendations, columns=['영화명', '장르', '감독', '개봉일'])\n","\n","    df[\"거리 점수\"] = similarity_scores\n","\n","    # 바 차트 생성\n","    plt.figure(figsize=(12, 6))\n","    plt.barh(df[\"영화명\"], df[\"거리 점수\"], color='skyblue')\n","    plt.xlabel('거리 점수')\n","    plt.title('영화 추천 거리 점수')\n","    plt.gca().invert_yaxis()  # 영화명이 위에서 아래로 표시되도록 순서 뒤집기\n","    for i, (title, score) in enumerate(zip(df[\"영화명\"], df[\"거리 점수\"])):\n","        plt.text(score, i, f'{score:.2f}', va='center')\n","    plt.show()\n","\n","def main():\n","    \"\"\"영화 추천 시스템 메인 함수\"\"\"\n","    user_input, gender, age, favored_genres = get_user_input()\n","    filtered_review, nnp_and_nng_review, movie_found, genre_found, director_found, person_found = process_user_input(user_input)\n","\n","    movie_title = movie_found['영화명'].tolist()[0] if movie_found is not None and not movie_found.empty else None\n","    genre = genre_found\n","    director = director_found\n","    actor = person_found\n","\n","    # get_recommendations 호출 시 nnp_and_nng_review를 전달합니다.\n","    recommendations = get_recommendations(movie_title, genre, director, actor, gender, age, favored_genres, nnp_and_nng_review)\n","\n","    display_recommendations(recommendations)\n","\n","    # 결과 출력\n","    print(\"고유명사(NNP)만 추출한 결과:\", filtered_review)\n","    print(\"고유명사(NNP)와 일반명사(NNG) 추출한 결과:\", nnp_and_nng_review)\n","    print(f\"찾은 영화: {movie_found}\")\n","    print(f\"찾은 감독: {director_found}\")\n","    print(f\"찾은 장르: {genre_found}\")\n","    print(f\"찾은 인물: {person_found}\")\n","\n","# 메인 함수 실행\n","if __name__ == \"__main__\":\n","    main()\n","\n","\n","#범죄도시2 같은 마동석이 나오는 영화 추천\n","\n","# 전쟁나서 사람들이 피난가는 줄거리의 영화를 추천해줄래?\n","# 군사정권에 맞서는 주인공 내용의 영화를 추천해줘"],"metadata":{"id":"l2iIpZONqU3_","executionInfo":{"status":"error","timestamp":1723274156291,"user_tz":-540,"elapsed":8048,"user":{"displayName":"크복짜","userId":"12410456823605642737"}},"colab":{"base_uri":"https://localhost:8080/","height":611},"outputId":"1e8cd919-39a2-4cab-983c-96672920662c"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["영화 제목, 원하는 장르, 감독 또는 출연 배우를 입력하세요 (예: 공포, 액션, 멜로, 서부, 로버트 다우니 주니어): 범죄도시2 같은 마동석이 나오는 영화 추천\n","사용자의 성별을 입력하세요 (남성, 여성) (입력하지 않으면 무시됩니다): \n","사용자의 나이를 입력하세요 (입력하지 않으면 무시됩니다): \n","사용자의 선호 장르를 입력하세요 (입력하지 않으면 무시됩니다): \n","처리된 입력 결과:\n","고유명사(NNP)만 추출한 결과: [('범죄도시', 'NNP'), ('마동석', 'NNP')]\n","고유명사(NNP)와 일반명사(NNG) 추출한 결과: [('범죄도시', 'NNP'), ('마동석', 'NNP'), ('영화', 'NNG'), ('추천', 'NNG')]\n","찾은 영화:        영화명     장르         text\n","169  범죄도시4  액션,범죄  범죄도시4 액션,범죄\n","찾은 감독: None\n","찾은 장르: \n","찾은 인물: 마동석\n"]},{"output_type":"error","ename":"TypeError","evalue":"list indices must be integers or slices, not tuple","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-63-97a79bab2f63>\u001b[0m in \u001b[0;36m<cell line: 88>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;31m# 메인 함수 실행\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     88\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 89\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-63-97a79bab2f63>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;31m# get_recommendations 호출 시 nnp_and_nng_review를 전달합니다.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 75\u001b[0;31m     \u001b[0mrecommendations\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_recommendations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmovie_title\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgenre\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdirector\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgender\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfavored_genres\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnnp_and_nng_review\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0mdisplay_recommendations\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrecommendations\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-61-1866ad71684a>\u001b[0m in \u001b[0;36mget_recommendations\u001b[0;34m(movie_title, genre, director, actor, gender, age, favored_genres, cosine_sim, nnp_and_nng_review)\u001b[0m\n\u001b[1;32m    121\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mfiltered_idx\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m                     \u001b[0;32mcontinue\u001b[0m  \u001b[0;31m# 자기 자신은 제외\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 123\u001b[0;31m                 \u001b[0msim_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcosine_sim\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfiltered_idx\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    124\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not tuple"]}]},{"cell_type":"code","source":[],"metadata":{"id":"YGBliQjzRoTK","executionInfo":{"status":"aborted","timestamp":1723273679614,"user_tz":-540,"elapsed":4,"user":{"displayName":"크복짜","userId":"12410456823605642737"}}},"execution_count":null,"outputs":[]}]}